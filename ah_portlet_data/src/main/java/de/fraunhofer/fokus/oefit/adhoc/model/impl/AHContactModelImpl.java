/*
 * Copyright (c) 2015, Fraunhofer FOKUS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * 
 * * Neither the name of particity nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 * 
 * @author sma
 */
package de.fraunhofer.fokus.oefit.adhoc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.fraunhofer.fokus.oefit.adhoc.model.AHContact;
import de.fraunhofer.fokus.oefit.adhoc.model.AHContactModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AHContact service. Represents a row in the &quot;AHCONTACT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.fraunhofer.fokus.oefit.adhoc.model.AHContactModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AHContactImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AHContactImpl
 * @see de.fraunhofer.fokus.oefit.adhoc.model.AHContact
 * @see de.fraunhofer.fokus.oefit.adhoc.model.AHContactModel
 * @generated
 */
public class AHContactModelImpl extends BaseModelImpl<AHContact>
    implements AHContactModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a a h contact model instance should use the {@link de.fraunhofer.fokus.oefit.adhoc.model.AHContact} interface instead.
     */
    public static final String TABLE_NAME = "AHCONTACT";
    public static final Object[][] TABLE_COLUMNS = {
            { "contactId", Types.BIGINT },
            { "forename", Types.VARCHAR },
            { "surname", Types.VARCHAR },
            { "tel", Types.VARCHAR },
            { "mobile", Types.VARCHAR },
            { "fax", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "www", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table AHCONTACT (contactId LONG not null primary key,forename VARCHAR(80) null,surname VARCHAR(80) null,tel VARCHAR(80) null,mobile VARCHAR(80) null,fax VARCHAR(80) null,email VARCHAR(80) null,www VARCHAR(160) null)";
    public static final String TABLE_SQL_DROP = "drop table AHCONTACT";
    public static final String ORDER_BY_JPQL = " ORDER BY ahContact.contactId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY AHCONTACT.contactId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.fraunhofer.fokus.oefit.adhoc.model.AHContact"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.fraunhofer.fokus.oefit.adhoc.model.AHContact"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.fraunhofer.fokus.oefit.adhoc.model.AHContact"),
            true);
    public static long EMAIL_COLUMN_BITMASK = 1L;
    public static long FORENAME_COLUMN_BITMASK = 2L;
    public static long SURNAME_COLUMN_BITMASK = 4L;
    public static long CONTACTID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.fraunhofer.fokus.oefit.adhoc.model.AHContact"));
    private static ClassLoader _classLoader = AHContact.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AHContact.class
        };
    private long _contactId;
    private String _forename;
    private String _originalForename;
    private String _surname;
    private String _originalSurname;
    private String _tel;
    private String _mobile;
    private String _fax;
    private String _email;
    private String _originalEmail;
    private String _www;
    private long _columnBitmask;
    private AHContact _escapedModel;

    public AHContactModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _contactId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setContactId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _contactId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AHContact.class;
    }

    @Override
    public String getModelClassName() {
        return AHContact.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("contactId", getContactId());
        attributes.put("forename", getForename());
        attributes.put("surname", getSurname());
        attributes.put("tel", getTel());
        attributes.put("mobile", getMobile());
        attributes.put("fax", getFax());
        attributes.put("email", getEmail());
        attributes.put("www", getWww());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long contactId = (Long) attributes.get("contactId");

        if (contactId != null) {
            setContactId(contactId);
        }

        String forename = (String) attributes.get("forename");

        if (forename != null) {
            setForename(forename);
        }

        String surname = (String) attributes.get("surname");

        if (surname != null) {
            setSurname(surname);
        }

        String tel = (String) attributes.get("tel");

        if (tel != null) {
            setTel(tel);
        }

        String mobile = (String) attributes.get("mobile");

        if (mobile != null) {
            setMobile(mobile);
        }

        String fax = (String) attributes.get("fax");

        if (fax != null) {
            setFax(fax);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String www = (String) attributes.get("www");

        if (www != null) {
            setWww(www);
        }
    }

    @Override
    public long getContactId() {
        return _contactId;
    }

    @Override
    public void setContactId(long contactId) {
        _contactId = contactId;
    }

    @Override
    public String getForename() {
        if (_forename == null) {
            return StringPool.BLANK;
        } else {
            return _forename;
        }
    }

    @Override
    public void setForename(String forename) {
        _columnBitmask |= FORENAME_COLUMN_BITMASK;

        if (_originalForename == null) {
            _originalForename = _forename;
        }

        _forename = forename;
    }

    public String getOriginalForename() {
        return GetterUtil.getString(_originalForename);
    }

    @Override
    public String getSurname() {
        if (_surname == null) {
            return StringPool.BLANK;
        } else {
            return _surname;
        }
    }

    @Override
    public void setSurname(String surname) {
        _columnBitmask |= SURNAME_COLUMN_BITMASK;

        if (_originalSurname == null) {
            _originalSurname = _surname;
        }

        _surname = surname;
    }

    public String getOriginalSurname() {
        return GetterUtil.getString(_originalSurname);
    }

    @Override
    public String getTel() {
        if (_tel == null) {
            return StringPool.BLANK;
        } else {
            return _tel;
        }
    }

    @Override
    public void setTel(String tel) {
        _tel = tel;
    }

    @Override
    public String getMobile() {
        if (_mobile == null) {
            return StringPool.BLANK;
        } else {
            return _mobile;
        }
    }

    @Override
    public void setMobile(String mobile) {
        _mobile = mobile;
    }

    @Override
    public String getFax() {
        if (_fax == null) {
            return StringPool.BLANK;
        } else {
            return _fax;
        }
    }

    @Override
    public void setFax(String fax) {
        _fax = fax;
    }

    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _columnBitmask |= EMAIL_COLUMN_BITMASK;

        if (_originalEmail == null) {
            _originalEmail = _email;
        }

        _email = email;
    }

    public String getOriginalEmail() {
        return GetterUtil.getString(_originalEmail);
    }

    @Override
    public String getWww() {
        if (_www == null) {
            return StringPool.BLANK;
        } else {
            return _www;
        }
    }

    @Override
    public void setWww(String www) {
        _www = www;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            AHContact.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public AHContact toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AHContact) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AHContactImpl ahContactImpl = new AHContactImpl();

        ahContactImpl.setContactId(getContactId());
        ahContactImpl.setForename(getForename());
        ahContactImpl.setSurname(getSurname());
        ahContactImpl.setTel(getTel());
        ahContactImpl.setMobile(getMobile());
        ahContactImpl.setFax(getFax());
        ahContactImpl.setEmail(getEmail());
        ahContactImpl.setWww(getWww());

        ahContactImpl.resetOriginalValues();

        return ahContactImpl;
    }

    @Override
    public int compareTo(AHContact ahContact) {
        long primaryKey = ahContact.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AHContact)) {
            return false;
        }

        AHContact ahContact = (AHContact) obj;

        long primaryKey = ahContact.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AHContactModelImpl ahContactModelImpl = this;

        ahContactModelImpl._originalForename = ahContactModelImpl._forename;

        ahContactModelImpl._originalSurname = ahContactModelImpl._surname;

        ahContactModelImpl._originalEmail = ahContactModelImpl._email;

        ahContactModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<AHContact> toCacheModel() {
        AHContactCacheModel ahContactCacheModel = new AHContactCacheModel();

        ahContactCacheModel.contactId = getContactId();

        ahContactCacheModel.forename = getForename();

        String forename = ahContactCacheModel.forename;

        if ((forename != null) && (forename.length() == 0)) {
            ahContactCacheModel.forename = null;
        }

        ahContactCacheModel.surname = getSurname();

        String surname = ahContactCacheModel.surname;

        if ((surname != null) && (surname.length() == 0)) {
            ahContactCacheModel.surname = null;
        }

        ahContactCacheModel.tel = getTel();

        String tel = ahContactCacheModel.tel;

        if ((tel != null) && (tel.length() == 0)) {
            ahContactCacheModel.tel = null;
        }

        ahContactCacheModel.mobile = getMobile();

        String mobile = ahContactCacheModel.mobile;

        if ((mobile != null) && (mobile.length() == 0)) {
            ahContactCacheModel.mobile = null;
        }

        ahContactCacheModel.fax = getFax();

        String fax = ahContactCacheModel.fax;

        if ((fax != null) && (fax.length() == 0)) {
            ahContactCacheModel.fax = null;
        }

        ahContactCacheModel.email = getEmail();

        String email = ahContactCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            ahContactCacheModel.email = null;
        }

        ahContactCacheModel.www = getWww();

        String www = ahContactCacheModel.www;

        if ((www != null) && (www.length() == 0)) {
            ahContactCacheModel.www = null;
        }

        return ahContactCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{contactId=");
        sb.append(getContactId());
        sb.append(", forename=");
        sb.append(getForename());
        sb.append(", surname=");
        sb.append(getSurname());
        sb.append(", tel=");
        sb.append(getTel());
        sb.append(", mobile=");
        sb.append(getMobile());
        sb.append(", fax=");
        sb.append(getFax());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", www=");
        sb.append(getWww());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("de.fraunhofer.fokus.oefit.adhoc.model.AHContact");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>contactId</column-name><column-value><![CDATA[");
        sb.append(getContactId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>forename</column-name><column-value><![CDATA[");
        sb.append(getForename());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>surname</column-name><column-value><![CDATA[");
        sb.append(getSurname());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tel</column-name><column-value><![CDATA[");
        sb.append(getTel());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mobile</column-name><column-value><![CDATA[");
        sb.append(getMobile());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fax</column-name><column-value><![CDATA[");
        sb.append(getFax());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>www</column-name><column-value><![CDATA[");
        sb.append(getWww());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
