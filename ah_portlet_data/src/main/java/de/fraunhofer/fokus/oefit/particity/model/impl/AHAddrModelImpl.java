package de.fraunhofer.fokus.oefit.particity.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.fraunhofer.fokus.oefit.particity.model.AHAddr;
import de.fraunhofer.fokus.oefit.particity.model.AHAddrModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AHAddr service. Represents a row in the &quot;AHADDR&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.fraunhofer.fokus.oefit.particity.model.AHAddrModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AHAddrImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AHAddrImpl
 * @see de.fraunhofer.fokus.oefit.particity.model.AHAddr
 * @see de.fraunhofer.fokus.oefit.particity.model.AHAddrModel
 * @generated
 */
public class AHAddrModelImpl extends BaseModelImpl<AHAddr>
    implements AHAddrModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a a h addr model instance should use the {@link de.fraunhofer.fokus.oefit.particity.model.AHAddr} interface instead.
     */
    public static final String TABLE_NAME = "AHADDR";
    public static final Object[][] TABLE_COLUMNS = {
            { "addrId", Types.BIGINT },
            { "street", Types.VARCHAR },
            { "number_", Types.VARCHAR },
            { "coordLat", Types.FLOAT },
            { "coordLon", Types.FLOAT },
            { "regionId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table AHADDR (addrId LONG not null primary key,street VARCHAR(160) null,number_ VARCHAR(75) null,coordLat DOUBLE,coordLon DOUBLE,regionId LONG)";
    public static final String TABLE_SQL_DROP = "drop table AHADDR";
    public static final String ORDER_BY_JPQL = " ORDER BY ahAddr.addrId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY AHADDR.addrId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.fraunhofer.fokus.oefit.particity.model.AHAddr"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.fraunhofer.fokus.oefit.particity.model.AHAddr"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.fraunhofer.fokus.oefit.particity.model.AHAddr"),
            true);
    public static long REGIONID_COLUMN_BITMASK = 1L;
    public static long ADDRID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.fraunhofer.fokus.oefit.particity.model.AHAddr"));
    private static ClassLoader _classLoader = AHAddr.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { AHAddr.class };
    private long _addrId;
    private String _street;
    private String _number;
    private float _coordLat;
    private float _coordLon;
    private long _regionId;
    private long _originalRegionId;
    private boolean _setOriginalRegionId;
    private long _columnBitmask;
    private AHAddr _escapedModel;

    public AHAddrModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _addrId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setAddrId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _addrId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AHAddr.class;
    }

    @Override
    public String getModelClassName() {
        return AHAddr.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("addrId", getAddrId());
        attributes.put("street", getStreet());
        attributes.put("number", getNumber());
        attributes.put("coordLat", getCoordLat());
        attributes.put("coordLon", getCoordLon());
        attributes.put("regionId", getRegionId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long addrId = (Long) attributes.get("addrId");

        if (addrId != null) {
            setAddrId(addrId);
        }

        String street = (String) attributes.get("street");

        if (street != null) {
            setStreet(street);
        }

        String number = (String) attributes.get("number");

        if (number != null) {
            setNumber(number);
        }

        Float coordLat = (Float) attributes.get("coordLat");

        if (coordLat != null) {
            setCoordLat(coordLat);
        }

        Float coordLon = (Float) attributes.get("coordLon");

        if (coordLon != null) {
            setCoordLon(coordLon);
        }

        Long regionId = (Long) attributes.get("regionId");

        if (regionId != null) {
            setRegionId(regionId);
        }
    }

    @Override
    public long getAddrId() {
        return _addrId;
    }

    @Override
    public void setAddrId(long addrId) {
        _addrId = addrId;
    }

    @Override
    public String getStreet() {
        if (_street == null) {
            return StringPool.BLANK;
        } else {
            return _street;
        }
    }

    @Override
    public void setStreet(String street) {
        _street = street;
    }

    @Override
    public String getNumber() {
        if (_number == null) {
            return StringPool.BLANK;
        } else {
            return _number;
        }
    }

    @Override
    public void setNumber(String number) {
        _number = number;
    }

    @Override
    public float getCoordLat() {
        return _coordLat;
    }

    @Override
    public void setCoordLat(float coordLat) {
        _coordLat = coordLat;
    }

    @Override
    public float getCoordLon() {
        return _coordLon;
    }

    @Override
    public void setCoordLon(float coordLon) {
        _coordLon = coordLon;
    }

    @Override
    public long getRegionId() {
        return _regionId;
    }

    @Override
    public void setRegionId(long regionId) {
        _columnBitmask |= REGIONID_COLUMN_BITMASK;

        if (!_setOriginalRegionId) {
            _setOriginalRegionId = true;

            _originalRegionId = _regionId;
        }

        _regionId = regionId;
    }

    public long getOriginalRegionId() {
        return _originalRegionId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            AHAddr.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public AHAddr toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AHAddr) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AHAddrImpl ahAddrImpl = new AHAddrImpl();

        ahAddrImpl.setAddrId(getAddrId());
        ahAddrImpl.setStreet(getStreet());
        ahAddrImpl.setNumber(getNumber());
        ahAddrImpl.setCoordLat(getCoordLat());
        ahAddrImpl.setCoordLon(getCoordLon());
        ahAddrImpl.setRegionId(getRegionId());

        ahAddrImpl.resetOriginalValues();

        return ahAddrImpl;
    }

    @Override
    public int compareTo(AHAddr ahAddr) {
        long primaryKey = ahAddr.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AHAddr)) {
            return false;
        }

        AHAddr ahAddr = (AHAddr) obj;

        long primaryKey = ahAddr.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AHAddrModelImpl ahAddrModelImpl = this;

        ahAddrModelImpl._originalRegionId = ahAddrModelImpl._regionId;

        ahAddrModelImpl._setOriginalRegionId = false;

        ahAddrModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<AHAddr> toCacheModel() {
        AHAddrCacheModel ahAddrCacheModel = new AHAddrCacheModel();

        ahAddrCacheModel.addrId = getAddrId();

        ahAddrCacheModel.street = getStreet();

        String street = ahAddrCacheModel.street;

        if ((street != null) && (street.length() == 0)) {
            ahAddrCacheModel.street = null;
        }

        ahAddrCacheModel.number = getNumber();

        String number = ahAddrCacheModel.number;

        if ((number != null) && (number.length() == 0)) {
            ahAddrCacheModel.number = null;
        }

        ahAddrCacheModel.coordLat = getCoordLat();

        ahAddrCacheModel.coordLon = getCoordLon();

        ahAddrCacheModel.regionId = getRegionId();

        return ahAddrCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{addrId=");
        sb.append(getAddrId());
        sb.append(", street=");
        sb.append(getStreet());
        sb.append(", number=");
        sb.append(getNumber());
        sb.append(", coordLat=");
        sb.append(getCoordLat());
        sb.append(", coordLon=");
        sb.append(getCoordLon());
        sb.append(", regionId=");
        sb.append(getRegionId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("de.fraunhofer.fokus.oefit.particity.model.AHAddr");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>addrId</column-name><column-value><![CDATA[");
        sb.append(getAddrId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>street</column-name><column-value><![CDATA[");
        sb.append(getStreet());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>number</column-name><column-value><![CDATA[");
        sb.append(getNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>coordLat</column-name><column-value><![CDATA[");
        sb.append(getCoordLat());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>coordLon</column-name><column-value><![CDATA[");
        sb.append(getCoordLon());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regionId</column-name><column-value><![CDATA[");
        sb.append(getRegionId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
