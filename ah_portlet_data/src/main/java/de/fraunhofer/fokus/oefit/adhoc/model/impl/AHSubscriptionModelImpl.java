/*
 * Copyright (c) 2015, Fraunhofer FOKUS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * 
 * * Neither the name of particity nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 * 
 * @author sma
 */
package de.fraunhofer.fokus.oefit.adhoc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.fraunhofer.fokus.oefit.adhoc.model.AHSubscription;
import de.fraunhofer.fokus.oefit.adhoc.model.AHSubscriptionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AHSubscription service. Represents a row in the &quot;AHSUBSCR&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.fraunhofer.fokus.oefit.adhoc.model.AHSubscriptionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AHSubscriptionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AHSubscriptionImpl
 * @see de.fraunhofer.fokus.oefit.adhoc.model.AHSubscription
 * @see de.fraunhofer.fokus.oefit.adhoc.model.AHSubscriptionModel
 * @generated
 */
public class AHSubscriptionModelImpl extends BaseModelImpl<AHSubscription>
    implements AHSubscriptionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a a h subscription model instance should use the {@link de.fraunhofer.fokus.oefit.adhoc.model.AHSubscription} interface instead.
     */
    public static final String TABLE_NAME = "AHSUBSCR";
    public static final Object[][] TABLE_COLUMNS = {
            { "subId", Types.BIGINT },
            { "uuid_", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "status", Types.INTEGER },
            { "created", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table AHSUBSCR (subId LONG not null primary key,uuid_ VARCHAR(75) null,email VARCHAR(80) null,status INTEGER,created LONG)";
    public static final String TABLE_SQL_DROP = "drop table AHSUBSCR";
    public static final String ORDER_BY_JPQL = " ORDER BY ahSubscription.subId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY AHSUBSCR.subId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.fraunhofer.fokus.oefit.adhoc.model.AHSubscription"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.fraunhofer.fokus.oefit.adhoc.model.AHSubscription"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.fraunhofer.fokus.oefit.adhoc.model.AHSubscription"),
            true);
    public static long EMAIL_COLUMN_BITMASK = 1L;
    public static long UUID_COLUMN_BITMASK = 2L;
    public static long SUBID_COLUMN_BITMASK = 4L;
    public static final String MAPPING_TABLE_ADHOC_SUB_CITM_NAME = "ADHOC_sub_citm";
    public static final Object[][] MAPPING_TABLE_ADHOC_SUB_CITM_COLUMNS = {
            { "itemId", Types.BIGINT },
            { "subId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_ADHOC_SUB_CITM_SQL_CREATE = "create table ADHOC_sub_citm (itemId LONG not null,subId LONG not null,primary key (itemId, subId))";
    public static final boolean FINDER_CACHE_ENABLED_ADHOC_SUB_CITM = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ADHOC_sub_citm"), true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.fraunhofer.fokus.oefit.adhoc.model.AHSubscription"));
    private static ClassLoader _classLoader = AHSubscription.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AHSubscription.class
        };
    private long _subId;
    private String _uuid;
    private String _originalUuid;
    private String _email;
    private String _originalEmail;
    private int _status;
    private long _created;
    private long _columnBitmask;
    private AHSubscription _escapedModel;

    public AHSubscriptionModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _subId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setSubId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _subId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AHSubscription.class;
    }

    @Override
    public String getModelClassName() {
        return AHSubscription.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("subId", getSubId());
        attributes.put("uuid", getUuid());
        attributes.put("email", getEmail());
        attributes.put("status", getStatus());
        attributes.put("created", getCreated());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long subId = (Long) attributes.get("subId");

        if (subId != null) {
            setSubId(subId);
        }

        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Long created = (Long) attributes.get("created");

        if (created != null) {
            setCreated(created);
        }
    }

    @Override
    public long getSubId() {
        return _subId;
    }

    @Override
    public void setSubId(long subId) {
        _subId = subId;
    }

    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _columnBitmask |= EMAIL_COLUMN_BITMASK;

        if (_originalEmail == null) {
            _originalEmail = _email;
        }

        _email = email;
    }

    public String getOriginalEmail() {
        return GetterUtil.getString(_originalEmail);
    }

    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _status = status;
    }

    @Override
    public long getCreated() {
        return _created;
    }

    @Override
    public void setCreated(long created) {
        _created = created;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            AHSubscription.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public AHSubscription toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AHSubscription) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AHSubscriptionImpl ahSubscriptionImpl = new AHSubscriptionImpl();

        ahSubscriptionImpl.setSubId(getSubId());
        ahSubscriptionImpl.setUuid(getUuid());
        ahSubscriptionImpl.setEmail(getEmail());
        ahSubscriptionImpl.setStatus(getStatus());
        ahSubscriptionImpl.setCreated(getCreated());

        ahSubscriptionImpl.resetOriginalValues();

        return ahSubscriptionImpl;
    }

    @Override
    public int compareTo(AHSubscription ahSubscription) {
        long primaryKey = ahSubscription.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AHSubscription)) {
            return false;
        }

        AHSubscription ahSubscription = (AHSubscription) obj;

        long primaryKey = ahSubscription.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AHSubscriptionModelImpl ahSubscriptionModelImpl = this;

        ahSubscriptionModelImpl._originalUuid = ahSubscriptionModelImpl._uuid;

        ahSubscriptionModelImpl._originalEmail = ahSubscriptionModelImpl._email;

        ahSubscriptionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<AHSubscription> toCacheModel() {
        AHSubscriptionCacheModel ahSubscriptionCacheModel = new AHSubscriptionCacheModel();

        ahSubscriptionCacheModel.subId = getSubId();

        ahSubscriptionCacheModel.uuid = getUuid();

        String uuid = ahSubscriptionCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            ahSubscriptionCacheModel.uuid = null;
        }

        ahSubscriptionCacheModel.email = getEmail();

        String email = ahSubscriptionCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            ahSubscriptionCacheModel.email = null;
        }

        ahSubscriptionCacheModel.status = getStatus();

        ahSubscriptionCacheModel.created = getCreated();

        return ahSubscriptionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{subId=");
        sb.append(getSubId());
        sb.append(", uuid=");
        sb.append(getUuid());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", created=");
        sb.append(getCreated());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("de.fraunhofer.fokus.oefit.adhoc.model.AHSubscription");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>subId</column-name><column-value><![CDATA[");
        sb.append(getSubId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>created</column-name><column-value><![CDATA[");
        sb.append(getCreated());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
