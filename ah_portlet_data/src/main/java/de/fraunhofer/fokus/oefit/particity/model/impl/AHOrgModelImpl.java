package de.fraunhofer.fokus.oefit.particity.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.fraunhofer.fokus.oefit.particity.model.AHOrg;
import de.fraunhofer.fokus.oefit.particity.model.AHOrgModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AHOrg service. Represents a row in the &quot;AHORG&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.fraunhofer.fokus.oefit.particity.model.AHOrgModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AHOrgImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AHOrgImpl
 * @see de.fraunhofer.fokus.oefit.particity.model.AHOrg
 * @see de.fraunhofer.fokus.oefit.particity.model.AHOrgModel
 * @generated
 */
public class AHOrgModelImpl extends BaseModelImpl<AHOrg> implements AHOrgModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a a h org model instance should use the {@link de.fraunhofer.fokus.oefit.particity.model.AHOrg} interface instead.
     */
    public static final String TABLE_NAME = "AHORG";
    public static final Object[][] TABLE_COLUMNS = {
            { "orgId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "holder", Types.VARCHAR },
            { "owner", Types.VARCHAR },
            { "userlist", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "legalStatus", Types.VARCHAR },
            { "created", Types.BIGINT },
            { "updated", Types.BIGINT },
            { "contactId", Types.BIGINT },
            { "addressId", Types.BIGINT },
            { "status", Types.INTEGER },
            { "logoLocation", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table AHORG (orgId LONG not null primary key,name VARCHAR(160) null,holder VARCHAR(160) null,owner VARCHAR(75) null,userlist STRING null,description STRING null,legalStatus VARCHAR(80) null,created LONG,updated LONG,contactId LONG,addressId LONG,status INTEGER,logoLocation STRING null)";
    public static final String TABLE_SQL_DROP = "drop table AHORG";
    public static final String ORDER_BY_JPQL = " ORDER BY ahOrg.updated DESC, ahOrg.status DESC";
    public static final String ORDER_BY_SQL = " ORDER BY AHORG.updated DESC, AHORG.status DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.fraunhofer.fokus.oefit.particity.model.AHOrg"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.fraunhofer.fokus.oefit.particity.model.AHOrg"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.fraunhofer.fokus.oefit.particity.model.AHOrg"),
            true);
    public static long NAME_COLUMN_BITMASK = 1L;
    public static long OWNER_COLUMN_BITMASK = 2L;
    public static long STATUS_COLUMN_BITMASK = 4L;
    public static long UPDATED_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.fraunhofer.fokus.oefit.particity.model.AHOrg"));
    private static ClassLoader _classLoader = AHOrg.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { AHOrg.class };
    private long _orgId;
    private String _name;
    private String _originalName;
    private String _holder;
    private String _owner;
    private String _originalOwner;
    private String _userlist;
    private String _description;
    private String _legalStatus;
    private long _created;
    private long _updated;
    private long _contactId;
    private long _addressId;
    private int _status;
    private int _originalStatus;
    private boolean _setOriginalStatus;
    private String _logoLocation;
    private long _columnBitmask;
    private AHOrg _escapedModel;

    public AHOrgModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _orgId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setOrgId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _orgId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AHOrg.class;
    }

    @Override
    public String getModelClassName() {
        return AHOrg.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("orgId", getOrgId());
        attributes.put("name", getName());
        attributes.put("holder", getHolder());
        attributes.put("owner", getOwner());
        attributes.put("userlist", getUserlist());
        attributes.put("description", getDescription());
        attributes.put("legalStatus", getLegalStatus());
        attributes.put("created", getCreated());
        attributes.put("updated", getUpdated());
        attributes.put("contactId", getContactId());
        attributes.put("addressId", getAddressId());
        attributes.put("status", getStatus());
        attributes.put("logoLocation", getLogoLocation());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long orgId = (Long) attributes.get("orgId");

        if (orgId != null) {
            setOrgId(orgId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String holder = (String) attributes.get("holder");

        if (holder != null) {
            setHolder(holder);
        }

        String owner = (String) attributes.get("owner");

        if (owner != null) {
            setOwner(owner);
        }

        String userlist = (String) attributes.get("userlist");

        if (userlist != null) {
            setUserlist(userlist);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String legalStatus = (String) attributes.get("legalStatus");

        if (legalStatus != null) {
            setLegalStatus(legalStatus);
        }

        Long created = (Long) attributes.get("created");

        if (created != null) {
            setCreated(created);
        }

        Long updated = (Long) attributes.get("updated");

        if (updated != null) {
            setUpdated(updated);
        }

        Long contactId = (Long) attributes.get("contactId");

        if (contactId != null) {
            setContactId(contactId);
        }

        Long addressId = (Long) attributes.get("addressId");

        if (addressId != null) {
            setAddressId(addressId);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        String logoLocation = (String) attributes.get("logoLocation");

        if (logoLocation != null) {
            setLogoLocation(logoLocation);
        }
    }

    @Override
    public long getOrgId() {
        return _orgId;
    }

    @Override
    public void setOrgId(long orgId) {
        _orgId = orgId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @Override
    public String getHolder() {
        if (_holder == null) {
            return StringPool.BLANK;
        } else {
            return _holder;
        }
    }

    @Override
    public void setHolder(String holder) {
        _holder = holder;
    }

    @Override
    public String getOwner() {
        if (_owner == null) {
            return StringPool.BLANK;
        } else {
            return _owner;
        }
    }

    @Override
    public void setOwner(String owner) {
        _columnBitmask |= OWNER_COLUMN_BITMASK;

        if (_originalOwner == null) {
            _originalOwner = _owner;
        }

        _owner = owner;
    }

    public String getOriginalOwner() {
        return GetterUtil.getString(_originalOwner);
    }

    @Override
    public String getUserlist() {
        if (_userlist == null) {
            return StringPool.BLANK;
        } else {
            return _userlist;
        }
    }

    @Override
    public void setUserlist(String userlist) {
        _userlist = userlist;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public String getLegalStatus() {
        if (_legalStatus == null) {
            return StringPool.BLANK;
        } else {
            return _legalStatus;
        }
    }

    @Override
    public void setLegalStatus(String legalStatus) {
        _legalStatus = legalStatus;
    }

    @Override
    public long getCreated() {
        return _created;
    }

    @Override
    public void setCreated(long created) {
        _created = created;
    }

    @Override
    public long getUpdated() {
        return _updated;
    }

    @Override
    public void setUpdated(long updated) {
        _columnBitmask = -1L;

        _updated = updated;
    }

    @Override
    public long getContactId() {
        return _contactId;
    }

    @Override
    public void setContactId(long contactId) {
        _contactId = contactId;
    }

    @Override
    public long getAddressId() {
        return _addressId;
    }

    @Override
    public void setAddressId(long addressId) {
        _addressId = addressId;
    }

    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _columnBitmask = -1L;

        if (!_setOriginalStatus) {
            _setOriginalStatus = true;

            _originalStatus = _status;
        }

        _status = status;
    }

    public int getOriginalStatus() {
        return _originalStatus;
    }

    @Override
    public String getLogoLocation() {
        if (_logoLocation == null) {
            return StringPool.BLANK;
        } else {
            return _logoLocation;
        }
    }

    @Override
    public void setLogoLocation(String logoLocation) {
        _logoLocation = logoLocation;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            AHOrg.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public AHOrg toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AHOrg) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AHOrgImpl ahOrgImpl = new AHOrgImpl();

        ahOrgImpl.setOrgId(getOrgId());
        ahOrgImpl.setName(getName());
        ahOrgImpl.setHolder(getHolder());
        ahOrgImpl.setOwner(getOwner());
        ahOrgImpl.setUserlist(getUserlist());
        ahOrgImpl.setDescription(getDescription());
        ahOrgImpl.setLegalStatus(getLegalStatus());
        ahOrgImpl.setCreated(getCreated());
        ahOrgImpl.setUpdated(getUpdated());
        ahOrgImpl.setContactId(getContactId());
        ahOrgImpl.setAddressId(getAddressId());
        ahOrgImpl.setStatus(getStatus());
        ahOrgImpl.setLogoLocation(getLogoLocation());

        ahOrgImpl.resetOriginalValues();

        return ahOrgImpl;
    }

    @Override
    public int compareTo(AHOrg ahOrg) {
        int value = 0;

        if (getUpdated() < ahOrg.getUpdated()) {
            value = -1;
        } else if (getUpdated() > ahOrg.getUpdated()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        if (getStatus() < ahOrg.getStatus()) {
            value = -1;
        } else if (getStatus() > ahOrg.getStatus()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AHOrg)) {
            return false;
        }

        AHOrg ahOrg = (AHOrg) obj;

        long primaryKey = ahOrg.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AHOrgModelImpl ahOrgModelImpl = this;

        ahOrgModelImpl._originalName = ahOrgModelImpl._name;

        ahOrgModelImpl._originalOwner = ahOrgModelImpl._owner;

        ahOrgModelImpl._originalStatus = ahOrgModelImpl._status;

        ahOrgModelImpl._setOriginalStatus = false;

        ahOrgModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<AHOrg> toCacheModel() {
        AHOrgCacheModel ahOrgCacheModel = new AHOrgCacheModel();

        ahOrgCacheModel.orgId = getOrgId();

        ahOrgCacheModel.name = getName();

        String name = ahOrgCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            ahOrgCacheModel.name = null;
        }

        ahOrgCacheModel.holder = getHolder();

        String holder = ahOrgCacheModel.holder;

        if ((holder != null) && (holder.length() == 0)) {
            ahOrgCacheModel.holder = null;
        }

        ahOrgCacheModel.owner = getOwner();

        String owner = ahOrgCacheModel.owner;

        if ((owner != null) && (owner.length() == 0)) {
            ahOrgCacheModel.owner = null;
        }

        ahOrgCacheModel.userlist = getUserlist();

        String userlist = ahOrgCacheModel.userlist;

        if ((userlist != null) && (userlist.length() == 0)) {
            ahOrgCacheModel.userlist = null;
        }

        ahOrgCacheModel.description = getDescription();

        String description = ahOrgCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            ahOrgCacheModel.description = null;
        }

        ahOrgCacheModel.legalStatus = getLegalStatus();

        String legalStatus = ahOrgCacheModel.legalStatus;

        if ((legalStatus != null) && (legalStatus.length() == 0)) {
            ahOrgCacheModel.legalStatus = null;
        }

        ahOrgCacheModel.created = getCreated();

        ahOrgCacheModel.updated = getUpdated();

        ahOrgCacheModel.contactId = getContactId();

        ahOrgCacheModel.addressId = getAddressId();

        ahOrgCacheModel.status = getStatus();

        ahOrgCacheModel.logoLocation = getLogoLocation();

        String logoLocation = ahOrgCacheModel.logoLocation;

        if ((logoLocation != null) && (logoLocation.length() == 0)) {
            ahOrgCacheModel.logoLocation = null;
        }

        return ahOrgCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{orgId=");
        sb.append(getOrgId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", holder=");
        sb.append(getHolder());
        sb.append(", owner=");
        sb.append(getOwner());
        sb.append(", userlist=");
        sb.append(getUserlist());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", legalStatus=");
        sb.append(getLegalStatus());
        sb.append(", created=");
        sb.append(getCreated());
        sb.append(", updated=");
        sb.append(getUpdated());
        sb.append(", contactId=");
        sb.append(getContactId());
        sb.append(", addressId=");
        sb.append(getAddressId());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", logoLocation=");
        sb.append(getLogoLocation());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("de.fraunhofer.fokus.oefit.particity.model.AHOrg");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>orgId</column-name><column-value><![CDATA[");
        sb.append(getOrgId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>holder</column-name><column-value><![CDATA[");
        sb.append(getHolder());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>owner</column-name><column-value><![CDATA[");
        sb.append(getOwner());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userlist</column-name><column-value><![CDATA[");
        sb.append(getUserlist());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>legalStatus</column-name><column-value><![CDATA[");
        sb.append(getLegalStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>created</column-name><column-value><![CDATA[");
        sb.append(getCreated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updated</column-name><column-value><![CDATA[");
        sb.append(getUpdated());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contactId</column-name><column-value><![CDATA[");
        sb.append(getContactId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>addressId</column-name><column-value><![CDATA[");
        sb.append(getAddressId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>logoLocation</column-name><column-value><![CDATA[");
        sb.append(getLogoLocation());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
