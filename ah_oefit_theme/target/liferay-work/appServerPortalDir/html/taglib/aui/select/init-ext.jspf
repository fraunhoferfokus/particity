<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
if (request.getAttribute("aui:select:useNamespace") == null) {
	useNamespace = auiFormUseNamespace;
}

if (!useNamespace) {
	namespace = StringPool.BLANK;
}

if (Validator.isNull(label) && changesContext) {
	StringBundler sb = new StringBundler(5);

	sb.append(LanguageUtil.get(pageContext, title));
	sb.append(StringPool.SPACE);
	sb.append(StringPool.OPEN_PARENTHESIS);
	sb.append(LanguageUtil.get(pageContext, "changing-the-value-of-this-field-will-reload-the-page"));
	sb.append(StringPool.CLOSE_PARENTHESIS);

	title = sb.toString();
}
else if (Validator.isNotNull(title)) {
	title = LanguageUtil.get(pageContext, title);
}

String controlGroupCss = "control-group";

if (inlineField) {
	controlGroupCss = controlGroupCss.concat(" control-group-inline");
}

if (Validator.isNotNull(inlineLabel)) {
	controlGroupCss = controlGroupCss.concat(" form-inline");
}

String fieldCss = AUIUtil.buildCss("aui-field-select", disabled, first, last, cssClass);

boolean numericValue = false;

if ((bean != null) && Validator.isNull(listType) && showEmptyOption) {
	Object propertyInstance = null;

	Class<?> propertyTypeClass = BeanPropertiesUtil.getObjectTypeSilent(bean, name);

	if (propertyTypeClass.isPrimitive()) {
		propertyInstance = _primitiveObjects.get(propertyTypeClass);
	}
	else {
		try {
			propertyInstance = propertyTypeClass.newInstance();
		}
		catch (Exception e) {
		}
	}

	if (propertyInstance instanceof Number) {
		numericValue = true;
	}
}
%>

<%!
private static Map<Class<?>, Object> _primitiveObjects = new HashMap<Class<?>, Object>();

static {
	_primitiveObjects.put(byte.class, new Byte("0"));
	_primitiveObjects.put(double.class, new Double(0));
	_primitiveObjects.put(float.class, new Float(0));
	_primitiveObjects.put(int.class, new Integer(0));
	_primitiveObjects.put(long.class, new Long(0));
	_primitiveObjects.put(short.class, new Short("0"));
}
%>