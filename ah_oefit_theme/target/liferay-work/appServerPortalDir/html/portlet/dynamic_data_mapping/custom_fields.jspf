<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
Calendar localeCal = CalendarFactoryUtil.getCalendar(timeZone, locale);

int firstDayOfWeek = localeCal.getFirstDayOfWeek() - 1;
%>

<aui:script>
	AUI.add(
		'liferay-portlet-dynamic-data-mapping-custom-fields',
		function(A) {
			var FormBuilderTextField = A.FormBuilderTextField;
			var FormBuilderTypes = A.FormBuilder.types;

			var booleanParse = A.DataType.Boolean.parse;
			var camelize = Liferay.Util.camelize;
			var trim = A.Lang.trim;

			var STR_BLANK = '';

			var TPL_BUTTON = '<div class="field-labels-inline">' +
								'<input type="button" value="<%= UnicodeLanguageUtil.get(pageContext, "select") %>" />' +
							'<div>';

			var TPL_LINK_TO_PAGE = '<div class="lfr-ddm-link-to-page">' +
									'<a href="javascript:;"><%= UnicodeLanguageUtil.get(pageContext, "link") %></a>' +
								'</div>';

			var TPL_PARAGRAPH = '<p></p>';

			var TPL_SEPARATOR = '<div class="separator"></div>';

			var TPL_TEXT_HTML = '<textarea class="form-builder-field-node lfr-ddm-text-html"></textarea>';

			var TPL_WCM_IMAGE = '<div class="lfr-wcm-image"></div>';

			var applyStyles = function(node, styleContent) {
				var styles = styleContent.replace(/\n/g, STR_BLANK).split(';');

				node.setStyle(STR_BLANK);

				A.Array.each(
					styles,
					function(item, index, collection) {
						var rule = item.split(':');

						if (rule.length == 2) {
							var key = camelize(rule[0]);
							var value = trim(rule[1]);

							node.setStyle(key, value);
						}
					}
				);
			};

			var LiferayFormBuilderField = function() {
			};

			LiferayFormBuilderField.ATTRS = {
				autoGeneratedName: {
					setter: booleanParse,
					value: true
				},

				indexType: {
					value: 'keyword'
				},

				localizable: {
					seter: booleanParse,
					value: true
				},

				name: {
					setter: Liferay.FormBuilder.normalizeKey,
					valueFn: function() {
						var instance = this;

						return A.FormBuilderField.buildFieldName(instance.get('label'));
					}
				},

				repeatable: {
					setter: booleanParse,
					value: false
				}
			};

			A.Base.mix(A.FormBuilderField, [LiferayFormBuilderField]);

			var FormBuilderProto = A.FormBuilderField.prototype;

			var originalGetPropertyModel = FormBuilderProto.getPropertyModel;

			FormBuilderProto.getPropertyModel = function() {
				var instance = this;

				var model = originalGetPropertyModel.call(instance);

				var type = instance.get('type');

				var indexTypeOptions = {
					'': '<liferay-ui:message key="no" />',
					'keyword': '<liferay-ui:message key="yes" />'
				};

				if ((type == 'ddm-text-html') || (type == 'text') || (type == 'textarea')) {
					indexTypeOptions = {
						'': '<liferay-ui:message key="not-indexable" />',
						'keyword': '<liferay-ui:message key="indexable-keyword" />',
						'text': '<liferay-ui:message key="indexable-text" />'
					};
				}

				var booleanOptions = {
					'false': '<liferay-ui:message key="no" />',
					'true': '<liferay-ui:message key="yes" />'
				};

				return model.concat(
					[
						{
							attributeName: 'indexType',
							editor: new A.RadioCellEditor(
								{
									options: indexTypeOptions
								}
							),
							formatter: function(val) {
								return indexTypeOptions[val.data.value];
							},
							name: '<liferay-ui:message key="indexable" />'
						},
						{
							attributeName: 'localizable',
							editor: new A.RadioCellEditor(
								{
									options: booleanOptions
								}
							),
							formatter: function(val) {
								return booleanOptions[val.data.value];
							},
							name: '<liferay-ui:message key="localizable" />'
						},
						{
							attributeName: 'repeatable',
							editor: new A.RadioCellEditor(
								{
									options: booleanOptions
								}
							),
							formatter: function(val) {
								return booleanOptions[val.data.value];
							},
							name: '<liferay-ui:message key="repeatable" />'
						}
					]
				);
			};

			var DDMDateField = A.Component.create(
				{
					ATTRS: {
						dataType: {
							value: 'date'
						},

						fieldNamespace: {
							value: 'ddm'
						}
					},

					EXTENDS: A.FormBuilderTextField,

					NAME: 'ddm-date',

					prototype: {
						getPropertyModel: function() {
							var instance = this;

							var model = DDMDateField.superclass.getPropertyModel.apply(instance, arguments);

							A.Array.each(
								model,
								function(item, index, collection) {
									var attributeName = item.attributeName;

									if (attributeName === 'predefinedValue') {
										collection[index] = {
											attributeName: attributeName,
											editor: new A.DateCellEditor(
												{
													dateFormat: '%m/%d/%Y'
												}
											),
											name: '<%= UnicodeLanguageUtil.get(pageContext, "predefined-value") %>'
										};
									}
								}
							);

							return model;
						},

						renderUI: function() {
							var instance = this;

							DDMDateField.superclass.renderUI.apply(instance, arguments);

							instance.datePicker = new A.DatePicker(
								{
									trigger: instance.get('templateNode'),
									calendar: {
										firstDayOfWeek: <%= firstDayOfWeek %>,
										locale: '<%= locale %>'
									},
									trigger: instance.get('templateNode')
								}
							).render();

							instance.datePicker.calendar.set(
								'strings',
								{
									next: '<liferay-ui:message key="next" />',
									none: '<liferay-ui:message key="none" />',
									previous: '<liferay-ui:message key="previous" />',
									today: '<liferay-ui:message key="today" />'
								}
							);
						}
					}
				}
			);

			var DDMDecimalField = A.Component.create(
				{
					ATTRS: {
						dataType: {
							value: 'double'
						},

						fieldNamespace: {
							value: 'ddm'
						}
					},

					EXTENDS: A.FormBuilderTextField,

					NAME: 'ddm-decimal'
				}
			);

			var DDMDocumentLibraryField = A.Component.create(
				{
					ATTRS: {
						dataType: {
							value: 'document-library'
						},

						fieldNamespace: {
							value: 'ddm'
						}
					},

					EXTENDS: A.FormBuilderField,

					NAME: 'ddm-documentlibrary',

					prototype: {
						getHTML: function() {
							return TPL_BUTTON;
						},

						getPropertyModel: function() {
							var instance = this;

							var model = DDMDocumentLibraryField.superclass.getPropertyModel.apply(instance, arguments);

							A.Array.each(
								model,
								function(item, index, collection) {
									var attributeName = item.attributeName;
									var DLFileEntryCellEditor = Liferay.SpreadSheet.TYPE_EDITOR['ddm-documentlibrary'];

									if (attributeName === 'predefinedValue') {
										item.editor = new DLFileEntryCellEditor();

										item.formatter = function(obj) {
											var data = obj.data;

											var label = STR_BLANK;

											var value = data.value;

											if (value !== STR_BLANK) {
												label = '(<%= UnicodeLanguageUtil.get(pageContext, "file") %>)';
											}

											return label;
										};
									}
									else if (attributeName === 'type') {
										item.formatter = instance._defaultFormatter;
									}
								}
							);

							return model;
						},

						_defaultFormatter: function() {
							var instance = this;

							return 'documents-and-media';
						},

						_uiSetValue: function() {
							return '<%= UnicodeLanguageUtil.get(pageContext, "select") %>';
						}

					}

				}
			);

			var DDMIntegerField = A.Component.create(
				{
					ATTRS: {
						dataType: {
							value: 'integer'
						},

						fieldNamespace: {
							value: 'ddm'
						}
					},

					EXTENDS: A.FormBuilderTextField,

					NAME: 'ddm-integer'
				}
			);

			var DDMNumberField = A.Component.create(
				{
					ATTRS: {
						dataType: {
							value: 'number'
						},

						fieldNamespace: {
							value: 'ddm'
						}
					},

					EXTENDS: A.FormBuilderTextField,

					NAME: 'ddm-number'
				}
			);

			var DDMParagraphField = A.Component.create(
				{
					ATTRS: {
						dataType: {
							value: undefined
						},

						fieldNamespace: {
							value: 'ddm'
						},

						showLabel: {
							readOnly: true,
							value: true
						},

						style: {
							value: STR_BLANK
						}
					},

					EXTENDS: A.FormBuilderField,

					NAME: 'ddm-paragraph',

					UI_ATTRS: ['label', 'style'],

					prototype: {
						getHTML: function() {
							return TPL_PARAGRAPH;
						},

						getPropertyModel: function() {
							var instance = this;

							return [
								{
									attributeName: 'type',
									editor: false,
									name: '<%= UnicodeLanguageUtil.get(pageContext, "type") %>'
								},
								{
									attributeName: 'label',
									editor: new A.TextAreaCellEditor(),
									name: '<%= UnicodeLanguageUtil.get(pageContext, "text") %>'
								},
								{
									attributeName: 'style',
									editor: new A.TextAreaCellEditor(),
									name: '<%= UnicodeLanguageUtil.get(pageContext, "style") %>'
								}
							];
						},

						_uiSetLabel: function(val) {
							var instance = this;

							instance.get('templateNode').setContent(val);
						},

						_uiSetStyle: function(val) {
							var instance = this;

							var templateNode = instance.get('templateNode');

							applyStyles(templateNode, val);
						}
					}
				}
			);

			var DDMSeparatorField = A.Component.create(
				{
					ATTRS: {
						dataType: {
							value: undefined
						},

						fieldNamespace: {
							value: 'ddm'
						},

						showLabel: {
							value: false
						},

						style: {
							value: STR_BLANK
						}
					},

					EXTENDS: A.FormBuilderField,

					NAME: 'ddm-separator',

					UI_ATTRS: ['style'],

					prototype: {
						getHTML: function() {
							return TPL_SEPARATOR;
						},

						getPropertyModel: function() {
							var instance = this;

							var model = DDMSeparatorField.superclass.getPropertyModel.apply(instance, arguments);

							model.push(
								{
									attributeName: 'style',
									editor: new A.TextAreaCellEditor(),
									name: '<%= UnicodeLanguageUtil.get(pageContext, "style") %>'
								}
							);

							return model;
						},

						_uiSetStyle: function(val) {
							var instance = this;

							var templateNode = instance.get('templateNode');

							applyStyles(templateNode, val);
						}
					}
				}
			);

			var DDMHTMLTextField = A.Component.create(
				{
					ATTRS: {
						dataType: {
							value: 'html'
						},

						fieldNamespace: {
							value: 'ddm'
						}
					},

					EXTENDS: FormBuilderTextField,

					NAME: 'ddm-text-html',

					prototype: {
						getHTML: function() {
							return TPL_TEXT_HTML;
						}
					}
				}
			);

			var DDMLinkToPageField = A.Component.create(
				{
					ATTRS: {
						dataType: {
							value: 'link-to-page'
						},

						fieldNamespace: {
							value: 'ddm'
						}
					},

					EXTENDS: FormBuilderTextField,

					NAME: 'ddm-link-to-page',

					prototype: {
						getHTML: function() {
							return TPL_LINK_TO_PAGE;
						}
					}
				}
			);

			var WCMImageField = A.Component.create(
				{
					ATTRS: {
						dataType: {
							value: 'image'
						},

						fieldNamespace: {
							value: 'wcm'
						}
					},

					EXTENDS: A.FormBuilderField,

					NAME: 'wcm-image',

					prototype: {
						getHTML: function() {
							return TPL_WCM_IMAGE;
						}
					}
				}
			);

			FormBuilderTypes['ddm-date'] = DDMDateField;
			FormBuilderTypes['ddm-decimal'] = DDMDecimalField;
			FormBuilderTypes['ddm-documentlibrary'] = DDMDocumentLibraryField;
			FormBuilderTypes['ddm-integer'] = DDMIntegerField;
			FormBuilderTypes['ddm-link-to-page'] = DDMLinkToPageField;
			FormBuilderTypes['ddm-number'] = DDMNumberField;
			FormBuilderTypes['ddm-paragraph'] = DDMParagraphField;
			FormBuilderTypes['ddm-separator'] = DDMSeparatorField;
			FormBuilderTypes['ddm-text-html'] = DDMHTMLTextField;
			FormBuilderTypes['wcm-image'] = WCMImageField;
		},
		'',
		{
			requires: ['liferay-portlet-dynamic-data-mapping']
		}
	);
</aui:script>