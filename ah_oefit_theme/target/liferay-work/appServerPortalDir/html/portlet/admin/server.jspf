<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%= ReleaseInfo.getReleaseInfo() %><br />

<%
String keywords = ParamUtil.getString(request, "keywords");

long uptimeDiff = System.currentTimeMillis() - PortalUtil.getUptime().getTime();
long days = uptimeDiff / Time.DAY;
long hours = (uptimeDiff / Time.HOUR) % 24;
long minutes = (uptimeDiff / Time.MINUTE) % 60;
long seconds = (uptimeDiff / Time.SECOND) % 60;

NumberFormat numberFormat = NumberFormat.getInstance();

numberFormat.setMaximumIntegerDigits(2);
numberFormat.setMinimumIntegerDigits(2);

PortletURL serverURL = renderResponse.createRenderURL();

serverURL.setParameter("struts_action", "/admin/view");
serverURL.setParameter("tabs1", tabs1);
serverURL.setParameter("tabs2", tabs2);
serverURL.setParameter("tabs3", tabs3);
%>

<liferay-ui:message key="uptime" />:

<c:if test="<%= days > 0 %>">
	<%= days %> <%= LanguageUtil.get(pageContext, ((days > 1) ? "days" : "day")) %>,
</c:if>

<%= numberFormat.format(hours) %>:<%= numberFormat.format(minutes) %>:<%= numberFormat.format(seconds) %>

<br /><br />

<c:choose>
	<c:when test="<%= windowState.equals(WindowState.NORMAL) %>">
		<html:link page="/admin/view?windowState=maximized&portletMode=view&actionURL=0"><liferay-ui:message key="more" /></html:link> &raquo;
	</c:when>
	<c:otherwise>
		<liferay-ui:tabs
			names="resources,log-levels,properties,captcha,data-migration,file-uploads,mail,external-services,script,shutdown"
			param="tabs2"
			portletURL="<%= serverURL %>"
		/>

		<c:choose>
			<c:when test='<%= tabs2.equals("log-levels") %>'>
				<liferay-ui:tabs
					names="update-categories,add-category"
					param="tabs3"
					portletURL="<%= serverURL %>"
				/>

				<c:choose>
					<c:when test='<%= tabs3.equals("add-category") %>'>
						<aui:fieldset>
							<aui:input cssClass="lfr-input-text-container" label="" name="loggerName" type="text" />

							<aui:select label="" name="priority">

								<%
								for (int i = 0; i < Levels.ALL_LEVELS.length; i++) {
								%>

									<aui:option label="<%= Levels.ALL_LEVELS[i] %>" selected="<%= Level.INFO.equals(Levels.ALL_LEVELS[i]) %>" />

								<%
								}
								%>

							</aui:select>
						</aui:fieldset>

						<aui:button-row>

							<%
							String taglibAddLogLevel = renderResponse.getNamespace() + "saveServer('addLogLevel');";
							%>

							<aui:button onClick="<%= taglibAddLogLevel %>" value="save" />
						</aui:button-row>
					</c:when>
					<c:otherwise>
						<div class="form-search">
							<liferay-ui:input-search placeholder='<%= LanguageUtil.get(locale, "keywords") %>' title='<%= LanguageUtil.get(locale, "search-categories") %>' />
						</div>

						<%
						List<String> headerNames = new ArrayList<String>();

						headerNames.add("category");
						headerNames.add("level");

						SearchContainer searchContainer = new SearchContainer(renderRequest, null, null, SearchContainer.DEFAULT_CUR_PARAM, SearchContainer.DEFAULT_DELTA, serverURL, headerNames, null);

						Map currentLoggerNames = new TreeMap();

						Enumeration enu = LogManager.getCurrentLoggers();

						while (enu.hasMoreElements()) {
							Logger logger = (Logger)enu.nextElement();

							if (Validator.isNull(keywords) || logger.getName().contains(keywords)) {
								currentLoggerNames.put(logger.getName(), logger);
							}
						}

						List results = ListUtil.fromCollection(currentLoggerNames.entrySet());

						Iterator itr = results.iterator();

						while (itr.hasNext()) {
							Map.Entry entry = (Map.Entry)itr.next();

							String name = (String)entry.getKey();
							Logger logger = (Logger)entry.getValue();

							Level level = logger.getLevel();

							if (level == null) {
								itr.remove();
							}
						}

						searchContainer.setTotal(results.size());

						results = ListUtil.subList(results, searchContainer.getStart(), searchContainer.getEnd());

						searchContainer.setResults(results);

						List resultRows = searchContainer.getResultRows();

						for (int i = 0; i < results.size(); i++) {
							Map.Entry entry = (Map.Entry)results.get(i);

							String name = (String)entry.getKey();
							Logger logger = (Logger)entry.getValue();

							Level level = logger.getLevel();

							ResultRow row = new ResultRow(entry, name, i);

							// Name

							row.addText(HtmlUtil.escape(name));

							// Logger

							StringBundler sb = new StringBundler(Levels.ALL_LEVELS.length * 6 + 7);

							sb.append("<select name=\"");
							sb.append(renderResponse.getNamespace());
							sb.append("logLevel");
							sb.append(HtmlUtil.escapeAttribute(name));
							sb.append("\">");

							for (int j = 0; j < Levels.ALL_LEVELS.length; j++) {
								sb.append("<option ");

								if (level.equals(Levels.ALL_LEVELS[j])) {
									sb.append("selected");
								}

								sb.append(" value=\"");
								sb.append(Levels.ALL_LEVELS[j]);
								sb.append("\">");
								sb.append(Levels.ALL_LEVELS[j]);
								sb.append("</option>");
							}

							sb.append("</select>");

							row.addText(sb.toString());

							// Add result row

							resultRows.add(row);
						}
						%>

						<liferay-ui:search-iterator searchContainer="<%= searchContainer %>" />

						<aui:button-row>

							<%
							String taglibUpdateLogLevels = renderResponse.getNamespace() + "saveServer('updateLogLevels');";
							%>

							<aui:button onClick="<%= taglibUpdateLogLevels %>" value="save" />
						</aui:button-row>
					</c:otherwise>
				</c:choose>
			</c:when>
			<c:when test='<%= tabs2.equals("properties") %>'>
				<liferay-ui:tabs
					names="system-properties,portal-properties"
					param="tabs3"
					portletURL="<%= serverURL %>"
				/>

				<div class="form-search">
					<liferay-ui:input-search placeholder='<%= LanguageUtil.get(locale, "keywords") %>' />
				</div>

				<%
				List<String> headerNames = new ArrayList<String>();

				headerNames.add("property");
				headerNames.add("value");

				if (tabs3.equals("portal-properties")) {
					headerNames.add("source");
				}

				String emptyResultsMessage = null;

				if (tabs3.equals("portal-properties")) {
					emptyResultsMessage = "no-portal-properties-were-found-that-matched-the-keywords";
				}
				else {
					emptyResultsMessage = "no-system-properties-were-found-that-matched-the-keywords";
				}

				SearchContainer searchContainer = new SearchContainer(renderRequest, null, null, SearchContainer.DEFAULT_CUR_PARAM, SearchContainer.DEFAULT_DELTA, serverURL, headerNames, emptyResultsMessage);

				Map<String, String> filteredProperties = new TreeMap<String, String>();

				Properties properties = null;

				if (tabs3.equals("portal-properties")) {
					properties = PropsUtil.getProperties();
				}
				else {
					properties = System.getProperties();
				}

				for (Map.Entry<Object, Object> entry : properties.entrySet()) {
					String property = (String)entry.getKey();
					String value = StringPool.BLANK;

					if (ArrayUtil.contains(PropsValues.ADMIN_OBFUSCATED_PROPERTIES, property)) {
						value = "********";
					}
					else {
						value = (String)entry.getValue();
					}

					if (Validator.isNull(keywords) || property.contains(keywords) || value.contains(keywords)) {
						filteredProperties.put(property, value);
					}
				}

				List results = ListUtil.fromCollection(filteredProperties.entrySet());

				searchContainer.setTotal(results.size());

				results = ListUtil.subList(results, searchContainer.getStart(), searchContainer.getEnd());

				searchContainer.setResults(results);

				List resultRows = searchContainer.getResultRows();

				PortletPreferences serverPortletPreferences = PrefsPropsUtil.getPreferences();

				Map<String, String[]> serverPortletPreferencesMap = serverPortletPreferences.getMap();

				PortletPreferences companyPortletPreferences = PrefsPropsUtil.getPreferences(company.getCompanyId());

				Map<String, String[]> companyPortletPreferencesMap = companyPortletPreferences.getMap();

				for (int i = 0; i < results.size(); i++) {
					Map.Entry entry = (Map.Entry)results.get(i);

					String property = (String)entry.getKey();
					String value = (String)entry.getValue();

					boolean overriddenPropertyValue = false;

					if (tabs3.equals("portal-properties")) {
						if (serverPortletPreferencesMap.containsKey(property)) {
							value = serverPortletPreferences.getValue(property, StringPool.BLANK);

							overriddenPropertyValue = true;
						}

						if (companyPortletPreferencesMap.containsKey(property)) {
							value = companyPortletPreferences.getValue(property, StringPool.BLANK);

							overriddenPropertyValue = true;
						}
					}

					ResultRow row = new ResultRow(entry, property, i);

					// Property

					row.addText(HtmlUtil.escape(StringUtil.shorten(property, 80)));

					// Value

					if (Validator.isNotNull(value)) {
						if (value.length() > 80) {
							StringBundler sb = new StringBundler(5);

							sb.append("<span onmouseover=\"Liferay.Portal.ToolTip.show(this, '");
							sb.append(HtmlUtil.escape(value));
							sb.append("')\">");
							sb.append(HtmlUtil.escape(StringUtil.shorten(value, 80)));
							sb.append("</span>");

							row.addText(sb.toString());
						}
						else {
							row.addText(HtmlUtil.escape(StringUtil.shorten(value, 80)));
						}
					}
					else {
						row.addText(StringPool.BLANK);
					}

					// Source

					if (tabs3.equals("portal-properties")) {
						StringBundler sb = new StringBundler(5);

						sb.append("<span onmouseover=\"Liferay.Portal.ToolTip.show(this, '");

						if (overriddenPropertyValue) {
							sb.append(LanguageUtil.get(pageContext, "the-value-of-this-property-was-overridden-using-the-control-panel-and-is-stored-in-the-database"));
						}
						else {
							sb.append(LanguageUtil.get(pageContext, "the-value-of-this-property-is-read-from-a-portal.properties-file-or-one-of-its-extension-files"));
						}

						sb.append("')\"><img alt=\"");

						if (overriddenPropertyValue) {
							sb.append(LanguageUtil.get(pageContext, "the-value-of-this-property-was-overridden-using-the-control-panel-and-is-stored-in-the-database"));
						}
						else {
							sb.append(LanguageUtil.get(pageContext, "the-value-of-this-property-is-read-from-a-portal.properties-file-or-one-of-its-extension-files"));
						}

						sb.append("\" src=\"");
						sb.append(themeDisplay.getPathThemeImages());

						if (overriddenPropertyValue) {
							sb.append("/common/saved_in_database.png");
						}
						else {
							sb.append("/common/page.png");
						}

						sb.append("\" /></span>");

						row.addText(sb.toString());
					}

					// Add result row

					resultRows.add(row);
				}
				%>

				<liferay-ui:search-iterator searchContainer="<%= searchContainer %>" />
			</c:when>
			<c:when test='<%= tabs2.equals("captcha") %>'>
				<liferay-ui:error key="reCaptchaPrivateKey" message="the-recaptcha-private-key-is-not-valid" />
				<liferay-ui:error key="reCaptchaPublicKey" message="the-recaptcha-public-key-is-not-valid" />

				<aui:fieldset>
					<aui:input helpMessage='<%= LanguageUtil.format(pageContext, "recaptcha-help", "https://www.google.com/recaptcha/admin/create") %>' label="enable-recaptcha" name="reCaptchaEnabled" type="checkbox" value="<%= PrefsPropsUtil.getString(PropsKeys.CAPTCHA_ENGINE_IMPL, PropsValues.CAPTCHA_ENGINE_IMPL).equals(ReCaptchaImpl.class.getName()) %>" />

					<aui:input cssClass="lfr-input-text-container" label="recaptcha-public-key" name="reCaptchaPublicKey" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.CAPTCHA_ENGINE_RECAPTCHA_KEY_PUBLIC, PropsValues.CAPTCHA_ENGINE_RECAPTCHA_KEY_PUBLIC) %>" />

					<aui:input cssClass="lfr-input-text-container" label="recaptcha-private-key" name="reCaptchaPrivateKey" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.CAPTCHA_ENGINE_RECAPTCHA_KEY_PRIVATE, PropsValues.CAPTCHA_ENGINE_RECAPTCHA_KEY_PRIVATE) %>" />
				</aui:fieldset>

				<aui:button-row>

					<%
					String taglibUpdateCaptcha = renderResponse.getNamespace() + "saveServer('updateCaptcha');";
					%>

					<aui:button onClick="<%= taglibUpdateCaptcha %>" value="save" />
				</aui:button-row>
			</c:when>
			<c:when test='<%= tabs2.equals("data-migration") %>'>

				<%
				List<ConvertProcess> convertProcesses = new ArrayList<ConvertProcess>();

				for (String convertProcessClassName : PropsValues.CONVERT_PROCESSES) {
					ConvertProcess convertProcess = (ConvertProcess)InstancePool.get(convertProcessClassName);

					if (convertProcess.isEnabled()) {
						convertProcesses.add(convertProcess);
					}
				}
				%>

				<c:choose>
					<c:when test="<%= convertProcesses.isEmpty() %>">
						<div class="alert alert-info">
							<liferay-ui:message key="no-data-migration-processes-are-available" />
						</div>
					</c:when>
					<c:otherwise>

						<%
						int i = 0;

						for (ConvertProcess convertProcess : convertProcesses) {
						%>

							<liferay-ui:panel-container extended="<%= true %>" id='<%= "convert" + i + "PanelContainer" %>' persistState="<%= true %>">
								<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id='<%= "convert" + i + "Panel" %>' persistState="<%= true %>" title="<%= convertProcess.getDescription() %>">
									<c:if test="<%= convertProcess.getParameterNames() != null %>">
										<aui:fieldset label='<%= Validator.isNotNull(convertProcess.getParameterDescription()) ? convertProcess.getParameterDescription() : "" %>'>

											<%
											for (String parameter : convertProcess.getParameterNames()) {
												if (parameter.contains(StringPool.EQUAL) && parameter.contains(StringPool.SEMICOLON)) {
													String[] parameterPair = StringUtil.split(parameter, CharPool.EQUAL);
													String[] parameterSelectEntries = StringUtil.split(parameterPair[1], CharPool.SEMICOLON);
											%>

												<aui:select label="<%= parameterPair[0] %>" name="<%= convertProcess.getClass().getName() + StringPool.PERIOD + parameterPair[0] %>">

													<%
													for (String parameterSelectEntry : parameterSelectEntries) {
													%>

														<aui:option label="<%= parameterSelectEntry %>" />

													<%
													}
													%>

												</aui:select>

											<%
												}
												else {
													String[] parameterPair = StringUtil.split(parameter, CharPool.EQUAL);

													String parameterName = null;
													String parameterType = null;

													if (parameterPair.length > 1) {
														parameterName = parameterPair[0];
														parameterType = parameterPair[1];
													}
													else {
														parameterName = parameter;
													}
											%>

													<aui:input cssClass="lfr-input-text-container" label="<%= parameterName %>" name="<%= convertProcess.getClass().getName() + StringPool.PERIOD + parameterName %>" type='<%= parameterType != null ? parameterType : "" %>' />

											<%
												}
											}
											%>

										</aui:fieldset>
									</c:if>

									<aui:button-row>

										<%
										String taglibConvertProcess = renderResponse.getNamespace() + "saveServer('convertProcess." + convertProcess.getClass().getName() + "');";
										%>

										<aui:button onClick="<%= taglibConvertProcess %>" value="execute" />
									</aui:button-row>
								</liferay-ui:panel>
							</liferay-ui:panel-container>

							<br />

						<%
							i++;
						}
						%>

					</c:otherwise>
				</c:choose>
			</c:when>
			<c:when test='<%= tabs2.equals("file-uploads") %>'>
				<aui:fieldset label="configure-the-file-upload-settings">
					<liferay-ui:panel-container extended="<%= true %>" id="adminGeneralUploadPanelContainer" persistState="<%= true %>">
						<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="adminGeneralUploadPanel" persistState="<%= true %>" title="general">
							<aui:input cssClass="lfr-input-text-container" label="overall-maximum-file-size" name="uploadServletRequestImplMaxSize" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.UPLOAD_SERVLET_REQUEST_IMPL_MAX_SIZE) %>" />

							<aui:input cssClass="lfr-input-text-container" label="temporary-storage-directory" name="uploadServletRequestImplTempDir" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.UPLOAD_SERVLET_REQUEST_IMPL_TEMP_DIR, StringPool.BLANK) %>" />
						</liferay-ui:panel>
					</liferay-ui:panel-container>

					<liferay-ui:panel-container extended="<%= true %>" id="adminDocumentLibraryPanelContainer" persistState="<%= true %>">
						<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="adminDocumentLibraryPanel" persistState="<%= true %>" title="documents-and-media">
							<aui:input cssClass="lfr-input-text-container" label="maximum-file-size" name="dlFileMaxSize" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.DL_FILE_MAX_SIZE) %>" />

							<aui:input cssClass="lfr-input-text-container" helpMessage="maximum-previewable-file-size-help" label="maximum-previewable-file-size" name="dlFileEntryPreviewableProcessorMaxSize" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.DL_FILE_ENTRY_PREVIEWABLE_PROCESSOR_MAX_SIZE) %>" />

							<aui:input cssClass="lfr-input-text-container" label="maximum-thumbnail-height" name="dlFileEntryThumbnailMaxHeight" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.DL_FILE_ENTRY_THUMBNAIL_MAX_HEIGHT) %>" />

							<aui:input cssClass="lfr-input-text-container" label="maximum-thumbnail-width" name="dlFileEntryThumbnailMaxWidth" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.DL_FILE_ENTRY_THUMBNAIL_MAX_WIDTH) %>" />

							<aui:input cssClass="lfr-input-text-container" label="allowed-file-extensions" name="dlFileExtensions" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.DL_FILE_EXTENSIONS) %>" />
						</liferay-ui:panel>
					</liferay-ui:panel-container>

					<liferay-ui:panel-container extended="<%= true %>" id="adminWebContentImagesPanelContainer" persistState="<%= true %>">
						<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="adminWebContentImagesPanel" persistState="<%= true %>" title="web-content-images">
							<aui:input cssClass="lfr-input-text-container" label="maximum-file-size" name="journalImageSmallMaxSize" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.JOURNAL_IMAGE_SMALL_MAX_SIZE) %>" />

							<aui:input cssClass="lfr-input-text-container" label="allowed-file-extensions" name="journalImageExtensions" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.JOURNAL_IMAGE_EXTENSIONS) %>" />
						</liferay-ui:panel>
					</liferay-ui:panel-container>

					<liferay-ui:panel-container extended="<%= true %>" id="adminShoppingCartImagesPanelContainer" persistState="<%= true %>">
						<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="adminShoppingCartImagesPanel" persistState="<%= true %>" title="shopping-cart-images">
							<aui:input cssClass="lfr-input-text-container" label='<%= LanguageUtil.get(pageContext, "maximum-file-size") + "(" + LanguageUtil.get(pageContext,"large-image") + ")" %>' name="shoppingImageLargeMaxSize" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.SHOPPING_IMAGE_LARGE_MAX_SIZE) %>" />

							<aui:input cssClass="lfr-input-text-container" label='<%= LanguageUtil.get(pageContext, "maximum-file-size") + "(" + LanguageUtil.get(pageContext,"medium-image") + ")" %>' name="shoppingImageMediumMaxSize" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.SHOPPING_IMAGE_MEDIUM_MAX_SIZE) %>" />

							<aui:input cssClass="lfr-input-text-container" label='<%= LanguageUtil.get(pageContext, "maximum-file-size") + "(" + LanguageUtil.get(pageContext,"small-image") + ")" %>' name="shoppingImageSmallMaxSize" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.SHOPPING_IMAGE_SMALL_MAX_SIZE) %>" />

							<aui:input cssClass="lfr-input-text-container" label="allowed-file-extensions" name="shoppingImageExtensions" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.SHOPPING_IMAGE_EXTENSIONS) %>" />
						</liferay-ui:panel>
					</liferay-ui:panel-container>

					<liferay-ui:panel-container extended="<%= true %>" id="adminSoftwareCatalogImagesPanelContainer" persistState="<%= true %>">
						<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="adminSoftwareCatalogImagesPanel" persistState="<%= true %>" title="software-catalog-images">
							<aui:input cssClass="lfr-input-text-container" label="maximum-file-size" name="scImageMaxSize" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.SC_IMAGE_MAX_SIZE) %>" />

							<aui:input cssClass="lfr-input-text-container" label="maximum-thumbnail-height" name="scImageThumbnailMaxHeight" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.SC_IMAGE_THUMBNAIL_MAX_HEIGHT) %>" />

							<aui:input cssClass="lfr-input-text-container" label="maximum-thumbnail-width" name="scImageThumbnailMaxWidth" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.SC_IMAGE_THUMBNAIL_MAX_WIDTH) %>" />
						</liferay-ui:panel>
					</liferay-ui:panel-container>

					<liferay-ui:panel-container extended="<%= true %>" id="adminUserImagesPanelContainer" persistState="<%= true %>">
						<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="adminUserImagesPanel" persistState="<%= true %>" title="user-images">
							<aui:input cssClass="lfr-input-text-container" label="maximum-file-size" name="usersImageMaxSize" type="text" value="<%= PrefsPropsUtil.getLong(PropsKeys.USERS_IMAGE_MAX_SIZE) %>" />
						</liferay-ui:panel>
					</liferay-ui:panel-container>
				</aui:fieldset>

				<aui:button-row>

					<%
					String taglibUpdateFileUploads = renderResponse.getNamespace() + "saveServer('updateFileUploads');";
					%>

					<aui:button onClick="<%= taglibUpdateFileUploads %>" value="save" />
				</aui:button-row>
			</c:when>
			<c:when test='<%= tabs2.equals("mail") %>'>
				<aui:fieldset>
					<liferay-ui:panel-container extended="<%= true %>" id="adminMailServerSettingsPanelContainer" persistState="<%= true %>">
						<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="adminMailServerSettingsPanel" persistState="<%= true %>" title="configure-the-mail-server-settings">
							<aui:input cssClass="lfr-input-text-container" label="incoming-pop-server" name="pop3Host" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.MAIL_SESSION_MAIL_POP3_HOST) %>" />

							<aui:input cssClass="lfr-input-text-container" label="incoming-port" name="pop3Port" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.MAIL_SESSION_MAIL_POP3_PORT) %>" />

							<aui:input label="use-a-secure-network-connection" name="pop3Secure" type="checkbox" value='<%= PrefsPropsUtil.getString(PropsKeys.MAIL_SESSION_MAIL_STORE_PROTOCOL).equals("pop3s") %>' />

							<aui:input cssClass="lfr-input-text-container" label="user-name" name="pop3User" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.MAIL_SESSION_MAIL_POP3_USER) %>" />

							<%
							String pop3Password = PrefsPropsUtil.getString(PropsKeys.MAIL_SESSION_MAIL_POP3_PASSWORD);

							if (Validator.isNotNull(pop3Password)) {
								pop3Password = Portal.TEMP_OBFUSCATION_VALUE;
							}
							%>

							<aui:input cssClass="lfr-input-text-container" label="password" name="pop3Password" type="password" value="<%= pop3Password %>" />

							<aui:input cssClass="lfr-input-text-container" label="outgoing-smtp-server" name="smtpHost" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.MAIL_SESSION_MAIL_SMTP_HOST) %>" />

							<aui:input cssClass="lfr-input-text-container" label="outgoing-port" name="smtpPort" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.MAIL_SESSION_MAIL_SMTP_PORT) %>" />

							<aui:input label="use-a-secure-network-connection" name="smtpSecure" type="checkbox" value='<%= PrefsPropsUtil.getString(PropsKeys.MAIL_SESSION_MAIL_TRANSPORT_PROTOCOL).equals("smtps") %>' />

							<aui:input cssClass="lfr-input-text-container" label="user-name" name="smtpUser" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.MAIL_SESSION_MAIL_SMTP_USER) %>" />

							<%
							String smtpPassword = PrefsPropsUtil.getString(PropsKeys.MAIL_SESSION_MAIL_SMTP_PASSWORD);

							if (Validator.isNotNull(smtpPassword)) {
								smtpPassword = Portal.TEMP_OBFUSCATION_VALUE;
							}
							%>

							<aui:input cssClass="lfr-input-text-container" label="password" name="smtpPassword" type="password" value="<%= smtpPassword %>" />

							<aui:input cssClass="lfr-textarea-container" label="manually-specify-additional-javamail-properties-to-override-the-above-configuration" name="advancedProperties" type="textarea" value="<%= PrefsPropsUtil.getString(PropsKeys.MAIL_SESSION_MAIL_ADVANCED_PROPERTIES, StringPool.BLANK) %>" />
						</liferay-ui:panel>
					</liferay-ui:panel-container>
				</aui:fieldset>

				<aui:button-row>

					<%
					String taglibUpdateMail = renderResponse.getNamespace() + "saveServer('updateMail');";
					%>

					<aui:button onClick="<%= taglibUpdateMail %>" value="save" />
				</aui:button-row>
			</c:when>
			<c:when test='<%= tabs2.equals("external-services") %>'>
				<aui:fieldset>
					<liferay-ui:panel-container extended="<%= true %>" id="adminExternalServicesPanelContainer" persistState="<%= true %>">
						<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="adminImageMagickConversionPanel" persistState="<%= true %>" title="enabling-imagemagick-provides-document-preview-functionality">
							<aui:input label="enabled" name="imageMagickEnabled" type="checkbox" value="<%= ImageMagickUtil.isEnabled() %>" />

							<aui:input cssClass="lfr-input-text-container" label="path" name="imageMagickPath" type="text" value="<%= ImageMagickUtil.getGlobalSearchPath() %>" />

							<aui:fieldset label="resource-limits">

								<%
								Properties resourceLimitsProperties = ImageMagickUtil.getResourceLimitsProperties();

								for (String label : _IMAGEMAGICK_RESOURCE_LIMIT_LABELS) {
									String name = "imageMagickLimit" + StringUtil.upperCaseFirstLetter(label);
								%>

									<aui:input cssClass="lfr-input-text-container" label="<%= label %>" name="<%= name %>" type="text" value="<%= resourceLimitsProperties.getProperty(label) %>" />

								<%
								}
								%>

							</aui:fieldset>
						</liferay-ui:panel>

						<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="adminOpenOfficeConversionPanel" persistState="<%= true %>" title="enabling-openoffice-integration-provides-document-conversion-functionality">
							<aui:input label="enabled" name="openOfficeEnabled" type="checkbox" value="<%= PrefsPropsUtil.getBoolean(PropsKeys.OPENOFFICE_SERVER_ENABLED) %>" />

							<aui:input cssClass="lfr-input-text-container" label="port" name="openOfficePort" type="text" value="<%= PrefsPropsUtil.getString(PropsKeys.OPENOFFICE_SERVER_PORT) %>" />
						</liferay-ui:panel>

						<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="adminXugglerPanel" persistState="<%= true %>" title="enabling-xuggler-provides-video-conversion-functionality">
							<c:choose>
								<c:when test="<%= XugglerUtil.isNativeLibraryInstalled() %>">
									<div class="alert alert-info">
										<liferay-ui:message key="xuggler-installed" />
									</div>

									<aui:input label="enabled" name="xugglerEnabled" type="checkbox" value="<%= XugglerUtil.isEnabled() %>" />
								</c:when>
								<c:otherwise>

									<%
									String xugglerHelp = LanguageUtil.format(pageContext, "xuggler-help", "http://www.xuggle.com/xuggler/downloads");

									String[] xugglerOptions = PropsUtil.getArray(PropsKeys.XUGGLER_JAR_OPTIONS);

									String bitmode = OSDetector.getBitmode();

									String guess = StringPool.BLANK;

									if (Validator.isNotNull(bitmode) && (bitmode.equals("32") || bitmode.equals("64"))) {
										if (OSDetector.isApple()) {
											guess = bitmode + "-mac";
										}
										else if (OSDetector.isLinux()) {
											guess = bitmode + "-linux";
										}
										else if (OSDetector.isWindows()) {
											guess = bitmode + "-win";
										}

										if (Validator.isNotNull(guess)) {
											boolean found = false;

											for (String xugglerOption : xugglerOptions) {
												if (xugglerOption.equals(guess)) {
													found = true;

													break;
												}
											}

											if (!found) {
												guess = StringPool.BLANK;
											}
										}
									}
									%>

									<div class="alert alert-info">
										<liferay-ui:message key="<%= xugglerHelp %>" />
									</div>

									<div id="<portlet:namespace />xugglerProgressInfo"></div>

									<liferay-ui:progress
										id='<%= renderResponse.getNamespace() + "xugglerProgressInfo" %>'
										message="preparing-the-installation"
										sessionKey="<%= LiferayFileUpload.PERCENT + WebKeys.XUGGLER_INSTALL_STATUS %>"
									/>

									<aui:select label="jar-file" name="jarName">

										<%
										if (Validator.isNull(guess)) {
										%>

											<aui:option label="unknown" value="" />

										<%
										}

										for (String xugglerOption : xugglerOptions) {
											String jarFile = PropsUtil.get(PropsKeys.XUGGLER_JAR_FILE, new Filter(xugglerOption));
											String jarName = PropsUtil.get(PropsKeys.XUGGLER_JAR_NAME, new Filter(xugglerOption));
										%>

											<aui:option label='<%= jarName + " (" + jarFile + ")" %>' selected="<%= xugglerOption.equals(guess) %>" value="<%= jarFile %>" />

										<%
										}
										%>

									</aui:select>

									<aui:button-row>
										<aui:button name="installXugglerButton" value="install" />
									</aui:button-row>
								</c:otherwise>
							</c:choose>
						</liferay-ui:panel>
					</liferay-ui:panel-container>
				</aui:fieldset>

				<aui:button-row>

					<%
					String taglibUpdateExternalServices = renderResponse.getNamespace() + "saveServer('updateExternalServices');";
					%>

					<aui:button onClick="<%= taglibUpdateExternalServices %>" value="save" />
				</aui:button-row>
			</c:when>
			<c:when test='<%= tabs2.equals("script") %>'>

				<%
				String language = ParamUtil.getString(renderRequest, "language", "javascript");

				if (SessionMessages.contains(renderRequest, "language")) {
					language = (String)SessionMessages.get(renderRequest, "language");
				}

				String script = "// ### Javascript Sample ###\n\nnumber = Packages.com.liferay.portal.service.UserLocalServiceUtil.getUsersCount();\n\nout.println(number);";

				if (SessionMessages.contains(renderRequest, "script")) {
					script = (String)SessionMessages.get(renderRequest, "script");
				}

				String scriptOutput = (String)SessionMessages.get(renderRequest, "scriptOutput");
				%>

				<aui:fieldset>
					<aui:select name="language">

						<%
						for (String supportedLanguage: ScriptingUtil.getSupportedLanguages()) {
						%>

							<aui:option label="<%= TextFormatter.format(supportedLanguage, TextFormatter.J) %>" selected="<%= supportedLanguage.equals(language) %>" value="<%= supportedLanguage %>" />

						<%
						}
						%>

					</aui:select>

					<aui:input cssClass="lfr-textarea-container" name="script" resizable="<%= true %>" type="textarea" value="<%= script %>" />
				</aui:fieldset>

				<c:if test="<%= Validator.isNotNull(scriptOutput) %>">
					<b><liferay-ui:message key="output" /></b>

					<pre><%= scriptOutput %></pre>
				</c:if>

				<aui:button-row>

					<%
					String taglibRunScript = renderResponse.getNamespace() + "saveServer('runScript');";
					%>

					<aui:button onClick="<%= taglibRunScript %>" value="execute" />
				</aui:button-row>
			</c:when>
			<c:when test='<%= tabs2.equals("shutdown") %>'>
				<liferay-ui:error key="shutdownMinutes" message="please-enter-the-number-of-minutes" />

				<aui:button-row>

					<%
					String taglibShutdown = renderResponse.getNamespace() + "saveServer('shutdown');";
					%>

					<c:choose>
						<c:when test="<%= ShutdownUtil.isInProcess() %>">
							<aui:button onClick="<%= taglibShutdown %>" value="cancel-shutdown" />
						</c:when>
						<c:otherwise>
							<aui:fieldset>
								<aui:input label="number-of-minutes" name="minutes" size="3" type="text">
									<aui:validator name="digits" />
									<aui:validator name="min">1</aui:validator>
									<aui:validator name="required" />
								</aui:input>

								<aui:input cssClass="lfr-textarea-container" label="custom-message" name='<%= "message" + GetterUtil.getString(ShutdownUtil.getMessage()) %>' type="textarea" />
							</aui:fieldset>

							<aui:button onClick="<%= taglibShutdown %>" value="shutdown" />
						</c:otherwise>
					</c:choose>
				</aui:button-row>
			</c:when>
			<c:otherwise>

				<%
				Runtime runtime = Runtime.getRuntime();

				numberFormat = NumberFormat.getInstance(locale);

				long totalMemory = runtime.totalMemory();
				long usedMemory = totalMemory - runtime.freeMemory();
				%>

				<div>
					<portlet:resourceURL var="totalMemoryChartURL">
						<portlet:param name="struts_action" value="/admin_server/view_chart" />
						<portlet:param name="type" value="total" />
						<portlet:param name="totalMemory" value="<%= String.valueOf(totalMemory) %>" />
						<portlet:param name="usedMemory" value="<%= String.valueOf(usedMemory) %>" />
					</portlet:resourceURL>

					<img border="0" src="<%= totalMemoryChartURL %>" />

					<portlet:resourceURL var="maxMemoryChartURL">
						<portlet:param name="struts_action" value="/admin_server/view_chart" />
						<portlet:param name="type" value="max" />
						<portlet:param name="maxMemory" value="<%= String.valueOf(runtime.maxMemory()) %>" />
						<portlet:param name="usedMemory" value="<%= String.valueOf(usedMemory) %>" />
					</portlet:resourceURL>

					<img border="0" src="<%= maxMemoryChartURL %>" />
				</div>

				<br />

				<table class="lfr-table">
				<tr>
					<td>
						<liferay-ui:message key="used-memory" />:
					</td>
					<td>
						<%= numberFormat.format(usedMemory) %> <liferay-ui:message key="bytes" />
					</td>
				</tr>
				<tr>
					<td>
						<liferay-ui:message key="total-memory" />:
					</td>
					<td>
						<%= numberFormat.format(runtime.totalMemory()) %> <liferay-ui:message key="bytes" />
					</td>
				</tr>
				<tr>
					<td>
						<liferay-ui:message key="maximum-memory" />:
					</td>
					<td>
						<%= numberFormat.format(runtime.maxMemory()) %> <liferay-ui:message key="bytes" />
					</td>
				</tr>
				</table>

				<br />

				<liferay-ui:panel-container extended="<%= true %>" id="adminServerAdministrationActionsPanelContainer" persistState="<%= true %>">
					<liferay-ui:panel collapsible="<%= true %>" extended="<%= true %>" id="adminServerAdministrationActionsPanel" persistState="<%= true %>" title="actions">
						<table class="table table-condensed table-hover">
						<tr>
							<td>
								<liferay-ui:message key="run-the-garbage-collector-to-free-up-memory" />
							</td>
							<td>

								<%
								String taglibGC = renderResponse.getNamespace() + "saveServer('gc');";
								%>

								<aui:button onClick="<%= taglibGC %>" value="execute" />
							</td>
						</tr>
						<tr>
							<td>
								<liferay-ui:message key="clear-content-cached-by-this-vm" />
							</td>
							<td>

								<%
								String taglibCacheSingle = renderResponse.getNamespace() + "saveServer('cacheSingle');";
								%>

								<aui:button onClick="<%= taglibCacheSingle %>" value="execute" />
							</td>
						</tr>
						<tr>
							<td>
								<liferay-ui:message key="clear-content-cached-across-the-cluster" />
							</td>
							<td>

								<%
								String taglibCacheMulti = renderResponse.getNamespace() + "saveServer('cacheMulti');";
								%>

								<aui:button onClick="<%= taglibCacheMulti %>" value="execute" />
							</td>
						</tr>
						<tr>
							<td>
								<liferay-ui:message key="clear-the-database-cache" />
							</td>
							<td>

								<%
								String taglibCacheDb = renderResponse.getNamespace() + "saveServer('cacheDb');";
								%>

								<aui:button onClick="<%= taglibCacheDb %>" value="execute" />
							</td>
						</tr>
						<tr>
							<td>
								<liferay-ui:message key="clear-the-direct-servlet-cache" />
							</td>
							<td>

								<%
								String taglibCacheServlet = renderResponse.getNamespace() + "saveServer('cacheServlet');";
								%>

								<aui:button onClick="<%= taglibCacheServlet %>" value="execute" />
							</td>
						</tr>
						<tr>
							<td>
								<liferay-ui:message key="reindex-all-search-indexes" />
							</td>
							<td>

								<%
								String taglibReindex = renderResponse.getNamespace() + "saveServer('reindex');";
								%>

								<aui:button onClick="<%= taglibReindex %>" value="execute" />
							</td>
						</tr>
						<tr>
							<td>
								<liferay-ui:message key="reindex-all-spell-check-indexes" />
							</td>
							<td>

								<%
								String taglibReindexDictionaries = renderResponse.getNamespace() + "saveServer('reindexDictionaries');";
								%>

								<aui:button onClick="<%= taglibReindexDictionaries %>" value="execute" />
							</td>
						</tr>
						<tr>
							<td>
								<liferay-ui:message key="reset-preview-and-thumbnail-files-for-documents-and-media-portlet" />
							</td>
							<td>

								<%
								String taglibDLPreviews = renderResponse.getNamespace() + "saveServer('dlPreviews');";
								%>

								<aui:button onClick="<%= taglibDLPreviews %>" value="execute" />
							</td>
						</tr>
						<tr>
							<td>
								<liferay-ui:message key="generate-thread-dump" />
							</td>
							<td>

								<%
								String taglibThreadDump = renderResponse.getNamespace() + "saveServer('threadDump');";
								%>

								<aui:button onClick="<%= taglibThreadDump %>" value="execute" />
							</td>
						</tr>
						<tr>
							<td>
								<liferay-ui:message key="verify-database-tables-of-all-plugins" />
							</td>
							<td>

								<%
								String taglibVerifyPluginTables = renderResponse.getNamespace() + "saveServer('verifyPluginTables');";
								%>

								<aui:button onClick="<%= taglibVerifyPluginTables %>" value="execute" />
							</td>
						</tr>
						<tr>
							<td>
								<liferay-ui:message key="verify-membership-policies" />
							</td>
							<td>

								<%
								String taglibVerifyMembershipPolicies = renderResponse.getNamespace() + "saveServer('verifyMembershipPolicies');";
								%>

								<aui:button onClick="<%= taglibVerifyMembershipPolicies %>" value="execute" />
							</td>
						</tr>
						<tr>
							<td>
								<liferay-ui:message key="clean-up-permissions" /> <liferay-ui:icon-help message="clean-up-permissions-help" />
							</td>
							<td>

								<%
								String taglibCleanUpPermissions = renderResponse.getNamespace() + "saveServer('cleanUpPermissions');";
								%>

								<aui:button onClick="<%= taglibCleanUpPermissions %>" value="execute" />
							</td>
						</tr>
						</table>
					</liferay-ui:panel>
				</liferay-ui:panel-container>
			</c:otherwise>
		</c:choose>
	</c:otherwise>
</c:choose>

<%!
private static final String[] _IMAGEMAGICK_RESOURCE_LIMIT_LABELS= {"area", "disk", "file", "map", "memory", "thread", "time"};
%>