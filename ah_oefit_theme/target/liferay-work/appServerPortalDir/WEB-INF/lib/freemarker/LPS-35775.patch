--- a/src/main/java/freemarker/core/DebugBreak.java
+++ src/freemarker/core/DebugBreak.java
@@ -63,16 +63,19 @@
  */
 public class DebugBreak extends TemplateElement
 {
-    public DebugBreak(TemplateElement nestedBlock)
+    private int lineNumber;
+
+    public DebugBreak(TemplateElement nestedBlock, int lineNumber)
     {
         this.nestedBlock = nestedBlock;
         nestedBlock.parent = this;
+        this.lineNumber = lineNumber;
         copyLocationFrom(nestedBlock);
     }
     
     protected void accept(Environment env) throws TemplateException, IOException
     {
-        if(!DebuggerService.suspendEnvironment(env, nestedBlock.getBeginLine()))
+        if(!DebuggerService.suspendEnvironment(env, this.getTemplate().getName(), this.lineNumber))
         {
             nestedBlock.accept(env);
         }
--- a/src/main/java/freemarker/debug/impl/RmiDebuggerImpl.java
+++ src/freemarker/debug/impl/RmiDebuggerImpl.java
@@ -28,9 +28,12 @@ implements
         this.service = service;
     }
 
-    public void addBreakpoint(Breakpoint breakpoint)
+    public void addBreakpoint(Breakpoint breakpoint) throws RemoteException
     {
-        service.addBreakpoint(breakpoint);
+        if(!service.addBreakpoint(breakpoint))
+        {
+            throw new RemoteException("unable to add breakpoint");
+        }
     }
 
     public Object addDebuggerListener(DebuggerListener listener)
--- a/src/main/java/freemarker/debug/EnvironmentSuspendedEvent.java
+++ src/freemarker/debug/EnvironmentSuspendedEvent.java
@@ -12,17 +12,36 @@
 {
     private static final long serialVersionUID = 1L;
 
+    private final String templateName;
+    private final long threadId;
     private final int line;
     private final DebuggedEnvironment env;
 
-    public EnvironmentSuspendedEvent(Object source, int line, DebuggedEnvironment env)
+    public EnvironmentSuspendedEvent(Object source, String templateName, int line, DebuggedEnvironment env)
     {
         super(source);
+        this.templateName = templateName;
+        this.threadId = Thread.currentThread().getId();
         this.line = line;
         this.env = env;
     }
 
     /**
+     * The name of the template where the execution of the environment
+     * was suspended
+     * @return String the template name
+     */
+    public String getTemplateName()
+    {
+        return this.templateName;
+    }
+
+    public long getThreadId()
+    {
+        return this.threadId;
+    }
+
+    /**
      * The line number in the template where the execution of the environment
      * was suspended.
      * @return int the line number
--- a/src/main/java/freemarker/debug/impl/DebuggerServer.java
+++ src/freemarker/debug/impl/DebuggerServer.java
@@ -82,6 +82,8 @@
     private final byte[] password;
     private final int port;
     private final Serializable debuggerStub;
+    private boolean stop = false;
+    private ServerSocket serverSocket;
     
     public DebuggerServer(Serializable debuggerStub)
     {
@@ -112,10 +114,10 @@ private void startInternal()
     {
         try
         {
-            ServerSocket ss = new ServerSocket(port);
-            for(;;)
+            serverSocket = new ServerSocket(port);
+            while(!stop)
             {
-                Socket s = ss.accept();
+                Socket s = serverSocket.accept();
                 new Thread(new DebuggerAuthProtocol(s)).start();
             }
         }
@@ -164,4 +166,20 @@ public void run()
         }
 
     }
+
+    public void stop()
+    {
+        this.stop = true;
+        if(serverSocket != null)
+        {
+            try
+            {
+                serverSocket.close();
+            }
+            catch(IOException e)
+            {
+                logger.error("Unable to close server socket.", e);
+            }
+        }
+    }
 }
--- a/src/main/java/freemarker/debug/impl/DebuggerService.java
+++ src/freemarker/debug/impl/DebuggerService.java
@@ -96,17 +96,24 @@ public static void registerTemplate(Template template)
     
     abstract void registerTemplateSpi(Template template);
     
-    public static boolean suspendEnvironment(Environment env, int line)
+    public static boolean suspendEnvironment(Environment env, String templateName, int line)
     throws
         RemoteException
     {
-        return instance.suspendEnvironmentSpi(env, line);
+        return instance.suspendEnvironmentSpi(env, templateName, line);
     }
     
-    abstract boolean suspendEnvironmentSpi(Environment env, int line)
+    abstract boolean suspendEnvironmentSpi(Environment env, String templateName, int line)
     throws
         RemoteException;
 
+    abstract void shutdownSpi();
+
+    public static void shutdown()
+    {
+        instance.shutdownSpi();
+    }
+
     private static class NoOpDebuggerService extends DebuggerService
     {
         List getBreakpointsSpi(String templateName)
@@ -114,7 +121,7 @@ List getBreakpointsSpi(String templateName)
             return Collections.EMPTY_LIST;
         }
         
-        boolean suspendEnvironmentSpi(Environment env, int line)
+        boolean suspendEnvironmentSpi(Environment env, String templateName, int line)
         {
             throw new UnsupportedOperationException();
         }
@@ -122,5 +129,9 @@ boolean suspendEnvironmentSpi(Environment env, int line)
         void registerTemplateSpi(Template template)
         {
         }
+
+        void shutdownSpi()
+        {
+        }
     }
 }
\ No newline at end of file
--- a/src/main/java/freemarker/debug/impl/RmiDebuggedEnvironmentImpl.java
+++ src/freemarker/debug/impl/RmiDebuggedEnvironmentImpl.java
@@ -1,12 +1,16 @@
 package freemarker.debug.impl;
 
+import java.rmi.Remote;
 import java.rmi.RemoteException;
+import java.rmi.server.UnicastRemoteObject;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 
 import freemarker.cache.CacheStorage;
 import freemarker.cache.SoftCacheStorage;
@@ -40,6 +44,8 @@
     private static final CacheStorage storage = new SoftCacheStorage(new IdentityHashMap());
     private static final Object idLock = new Object();
     private static long nextId = 1;
+    private static Set remotes = new HashSet();
+
     
     private boolean stopped = false;
     private final long id;
@@ -90,6 +96,14 @@ else if(key instanceof Configuration)
                 value = new DebugConfigurationModel((Configuration)key);
             }
         }
+        if(value != null)
+        {
+            storage.put(key, value);
+        }
+        if(value instanceof Remote)
+        {
+            remotes.add(value);
+        }
         return value;
     }
 
@@ -350,4 +364,18 @@ public TemplateModel get(String key) throws TemplateModelException
             return super.get(key);
         }
     }
+
+    public static void cleanup() {
+        for(Iterator i = remotes.iterator(); i.hasNext();)
+        {
+            Object remoteObject = i.next();
+            try
+            {
+                UnicastRemoteObject.unexportObject((Remote) remoteObject, true);
+            }
+            catch (Exception e)
+            {
+            }
+        }
+    }
 }
--- a/src/main/java/freemarker/debug/impl/RmiDebuggerService.java
+++ src/freemarker/debug/impl/RmiDebuggerService.java
@@ -55,8 +55,11 @@
 import java.io.Serializable;
 import java.lang.ref.ReferenceQueue;
 import java.lang.ref.WeakReference;
+import java.rmi.NoSuchObjectException;
+import java.rmi.Remote;
 import java.rmi.RemoteException;
 import java.rmi.server.RemoteObject;
+import java.rmi.server.UnicastRemoteObject;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -66,13 +69,17 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
+import freemarker.cache.CacheStorage;
+import freemarker.cache.SoftCacheStorage;
 import freemarker.core.DebugBreak;
 import freemarker.core.Environment;
 import freemarker.core.TemplateElement;
 import freemarker.debug.Breakpoint;
 import freemarker.debug.DebuggerListener;
 import freemarker.debug.EnvironmentSuspendedEvent;
+import freemarker.ext.util.IdentityHashMap;
 import freemarker.template.Template;
 import freemarker.template.utility.UndeclaredThrowableException;
 
@@ -89,11 +96,17 @@
     private final Map listeners = new HashMap();
     private final ReferenceQueue refQueue = new ReferenceQueue();
      
+
+    private final RmiDebuggerImpl debugger;
+    private DebuggerServer server;
+
     RmiDebuggerService()
     {
         try
         {
-            new DebuggerServer((Serializable)RemoteObject.toStub(new RmiDebuggerImpl(this))).start();
+            debugger = new RmiDebuggerImpl(this);
+            server = new DebuggerServer((Serializable)RemoteObject.toStub(debugger));
+            server.start();
         }
         catch(RemoteException e)
         {
@@ -125,7 +138,7 @@ List getBreakpointsSpi()
         return sumlist;
     }
 
-    boolean suspendEnvironmentSpi(Environment env, int line)
+    boolean suspendEnvironmentSpi(Environment env, String templateName, int line)
     throws
         RemoteException
     {
@@ -140,7 +153,7 @@ boolean suspendEnvironmentSpi(Environment env, int line)
         try
         {
             EnvironmentSuspendedEvent breakpointEvent = 
-                new EnvironmentSuspendedEvent(this, line, denv);
+                new EnvironmentSuspendedEvent(this, templateName, line, denv);
     
             synchronized(listeners)
             {
@@ -212,7 +225,7 @@
         }
     }
 
-    void addBreakpoint(Breakpoint breakpoint)
+    boolean addBreakpoint(Breakpoint breakpoint)
     {
         String templateName = breakpoint.getTemplateName();
         synchronized(templateDebugInfos)
@@ -235,44 +248,90 @@
                     }
                     else
                     {
-                        insertDebugBreak(t, breakpoint);
+                        boolean inserted = insertDebugBreak(t, breakpoint);
+                        if(!inserted){
+                            breakpoints.remove(breakpoint);
+                            return false;
+                        }
                     }
                 }
             }
         }
+        return true;
     }
 
-    private static void insertDebugBreak(Template t, Breakpoint breakpoint)
+    private static boolean insertDebugBreak(Template t, Breakpoint breakpoint)
     {
         TemplateElement te = findTemplateElement(t.getRootTreeNode(), breakpoint.getLine());
         if(te == null)
         {
-            return;
+            return false;
         }
         TemplateElement parent = (TemplateElement)te.getParent();
+        if( parent instanceof DebugBreak)
+        {
+            return false;
+        }
-        DebugBreak db = new DebugBreak(te);
+        while(parent != null)
+        {
+            if( parent instanceof DebugBreak)
+            {
+                return false;
+            }
+            parent = (TemplateElement)parent.getParent();
+        }
+        parent = (TemplateElement)te.getParent();
+        DebugBreak db = new DebugBreak(te, breakpoint.getLine());
         // TODO: Ensure there always is a parent by making sure
         // that the root element in the template is always a MixedContent
         // Also make sure it doesn't conflict with anyone's code.
         parent.setChildAt(parent.getIndex(te), db);
+        return true;
     }
 
     private static TemplateElement findTemplateElement(TemplateElement te, int line)
     {
         if(te.getBeginLine() > line || te.getEndLine() < line)
         {
             return null;
         }
         // Find the narrowest match
+        List childMatches = new ArrayList();
         for(Enumeration children = te.children(); children.hasMoreElements();)
         {
             TemplateElement child = (TemplateElement)children.nextElement();
             TemplateElement childmatch = findTemplateElement(child, line);
             if(childmatch != null)
             {
-                return childmatch;
+                childMatches.add(childmatch);
             }
         }
+        //find a match that exactly matches the begin/end line
+        TemplateElement bestMatch = null;
+        for(int i = 0; i < childMatches.size(); i++)
+        {
+            TemplateElement e = (TemplateElement) childMatches.get(i);
+
+            if( bestMatch == null )
+            {
+                bestMatch = e;
+            }
+
+            if( e.getBeginLine() == line && e.getEndLine() > line )
+            {
+                bestMatch = e;
+            }
+
+            if( e.getBeginLine() == e.getEndLine() && e.getBeginLine() == line)
+            {
+                bestMatch = e;
+                break;
+            }
+        }
+        if( bestMatch != null)
+        {
+           return bestMatch;
+        }
         // If no child provides narrower match, return this
         return te;
     }
@@ -467,4 +534,18 @@ private void processRefQueue()
             }
         }
     }
+
+    void shutdownSpi()
+    {
+        server.stop();
+        try
+        {
+            UnicastRemoteObject.unexportObject(this.debugger, true);
+        }
+        catch(Exception e)
+        {
+        }
+
+        RmiDebuggedEnvironmentImpl.cleanup();
+    }
 }
 
